<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SDC.Schema</name>
    </assembly>
    <members>
        <member name="T:SDC.Schema.ItemTypeEccEnum">
            <summary>
            Database item types
            </summary>
        </member>
        <member name="T:SDC.Schema.ItemTypeEnum">
            <summary>
            These are database representations of form items that need to be converted to SDC types
            </summary>
        </member>
        <member name="P:SDC.Schema.IBaseType.BaseName">
            <summary>
            The root text ("shortName") used to construct the name property.  The code may add a prefix and/or suffix to BaseName
            </summary>
        </member>
        <member name="P:SDC.Schema.IBaseType.ElementName">
            <summary>
            The name of XML element that is output from this class instance.
            Some SDC types are used in conjunction with multiple element names.  
            The auto-generated classes do not provide a way to determine the element name form the class instance.
            This property allows the code whichj creates each object to specify the element names that it is adding 
            as each object is creeated in code.  Although it may be possible to achieve this effect by reflection of 
            attributes, this ElementName approach provides more flexibility and is probably more efficient.
            ElementName will be most useful for auto-generating @name attributes for some elements.
            In many cases, ElementName will be assigned through class constructors, but it can also be assigned 
            through this property after the object is instantiated
            </summary>
        </member>
        <member name="P:SDC.Schema.IBaseType.ElementPrefix">
            <summary>
            The prefix used 
            in the @name attribute that is output from this class instance
            </summary>
        </member>
        <member name="P:SDC.Schema.IBaseType.ParentID">
            <summary>
            Returns the ID of the parent object (representing the parent XML element)
            This is the ObjectID, which is a sequentially assigned integer value.
            </summary>
        </member>
        <member name="P:SDC.Schema.IBaseType.ParentNode">
            <summary>
            Retrieve the BaseType object that is the immediate parent of the current object in the object tree
            </summary>
        </member>
        <member name="P:SDC.Schema.IBaseType.ParentIETypeID">
            <summary>
            Returns the ID property of the closest ancestor of type IdentifiedExtensionType.  
            For eCC, this is the Parent node's ID, which is derived from  the parent node's CTI_Ckey, a.k.a. ParentItemCkey.
            </summary>
        </member>
        <member name="T:SDC.Schema.IChildItemsMember`1">
            <summary>
            This interface is applied to the partial classes that can have a ChildItems element.
            These are Section, Question and ListItem.  
            This interface is require to support generic classes that must handle the creation ofthe 
            ChildItems element, which holds List of type IdentifiedItemType
            </summary>
            
        </member>
        <member name="T:SDC.Schema.ITopNode">
            <summary>
            </summary>
            A public/internal interface inherited by all types that sit at the top of the SDC class hierarchy
            Used by FormDesignType, DemogFormDesignType, DataElementType, RetrieveFormPackageType, and PackageListType
            The interface provides a common way to fill the above object trees using a single set of shared code.
            It also provdes a set of consistent, type-specific, public utilities for working with SDC objects
        </member>
        <member name="P:SDC.Schema.ITopNode.Nodes">
            <summary>
            Dictionary.  Given an Node ID (int), returns the node's object reference.
            </summary>
        </member>
        <member name="P:SDC.Schema.ITopNode.ParentNodes">
            <summary>
            Dictionary.  Given a Node ObjectGUID, return the *parent* node's object reference
            </summary>
        </member>
        <member name="P:SDC.Schema.ITopNode.ChildNodes">
            <summary>
            Dictionary.  Given a NodeID ObjectGUID, return a list of the child nodes object reference
            </summary>
        </member>
        <member name="P:SDC.Schema.ITopNode.GlobalAutoNameFlag">
            <summary>
            Automatically create and assign element names to all SDC elements
            </summary>
        </member>
        <member name="M:SDC.Schema.ITopNode.GetXml">
            <summary>
            Returns SDC XML from the SDC object tree.  The XML top node is determined by the top-level object tree node:
            FormDesignType, DemogFormDesignType, DataElementType, RetrieveFormPackageType, or PackageListType
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDC.Schema.ITopNode.GetJson">
            <summary>
            Not yet supported
            </summary>
            <returns></returns>
        </member>
        <member name="M:SDC.Schema.ITopNode.GetMsgPack">
            <summary>
            Not yet supported
            </summary>
            <returns></returns>
        </member>
        <member name="T:SDC.Schema.ITreeBuilderRemote">
            <summary>
            Top-level public methods used to build SDC tree in SDC.Schema.PartialClasses
            </summary>
        </member>
        <member name="T:SDC.Schema.FormDesignType">
            <summary>
            Start here. This is the top level of the SDCFormDesign object model.
            It represents the definition for the information content of a single data-entry
            form.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.BeforeLoadForm">
            <summary>
            NEW: This event is fired before the page is loaded
            into memory, and before stored form data is loaded. It may be used,
            e.g., for authentication, to retrieve/prepare stored data, and/or to
            control form rendering according to user
            preferences.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.BeforeLoadData">
            <summary>
            NEW: This event is fired after the page is loaded into
            memory, before stored form data is loaded, and before the form is
            visible. For example, It may be used to determine the data to be
            loaded and to perform the data loading.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.BeforeShowForm">
            <summary>
            NEW: This event is fired after the page is loaded is
            memory, after the data is loaded into the form, but before the form
            is displayed. It may be used to perform form activities that are
            controlled by the loaded data.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.OnEvent">
            <summary>
            Generic event handler - eventName must be
            specified.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.Header">
            <summary>
            Optional Section that stays at the top of a
            form.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.Body">
            <summary>
            Main Section of form
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.Footer">
            <summary>
            Optional Section that stays at the bottom of a
            form.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.lineage">
            <summary>
            A string identifier that is used to group multiple
            versions of a single form. The lineage is constant for all versions of a
            single kind of form. When appended to baseURI, it can be used to
            retrieve all versions of one particular form. Example:
            @lineage="Lung.Bmk.227"
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.version">
            <summary>
            @version contains the version text for the current form.
            It is designed to be used in conjunction with @baseURI and @lineage.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.versionPrev">
            <summary>
            @versionPrev identifies the immediate previous version of
            the current FDF. The format is the same as version. The primary role of
            this optional attribute is to allow automated comparisons between a
            current FDF and the immediate previous FDF version. This is often
            helpful when deciding whether to adopt a newer version of an FDF.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.fullURI">
            <summary>
            The full URI that uniquely identifies the current form. It
            is created by concatenating @baseURI + lineage + version. Each of the
            components is separated by a single forward slash.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.filename">
            <summary>
            @filename is the filename of the FDF when is saved to a
            file storage device (e.g., a disk or USB drive). The filename appears
            inside the FDF XML to help ensure the identity of the FDF content in
            case the saved filename (on a disk drive, etc.) has been changed for any
            reason.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.formTitle">
            <summary>
            @formTitle is a human readable title for display when
            choosing forms. Added 4/27/16
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.basedOnURI">
            <summary>
            @basedOnURI is a URI that identifies the SDC form that
            that the current FDF is based upon. In most cases, this should be a
            standard SDC form that is modified and/or extended by the current FDF.
            It’s best to avoid using prefixes like "http://" or "https://" because
            these can occasionally cause XML validation errors when used in a
            URI-typed field. The URI format should be the same format used in
            fullURI, which is patterned after the SDC web service API.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.instanceID">
            <summary>
            @instanceID is unique string (e.g., a GUID) used to
            identify a unique instance of a form, such as a form used during a
            single patient encounter. The @instanceID is used to track saved form
            responses across time and across multiple episodes of editing by
            end-users. This string does not change for each edit session of a form
            or package instance. The @instanceID is required in an FDF-R; It is not
            allowed in an FDF.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.instanceVersion">
            <summary>
            @instanceVersion Timestamp is used to identify a unique instance of a form.
            Used for tracking form responses across time and across multiple
            episodes of editing by end-users. This field must change for each edit
            session of a form instance. The instanceVersion is required in an FDF-R;
            It is not allowed in an FDF.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SDC.Schema.FormDesignType.instanceVersionURI" -->
        <member name="P:SDC.Schema.FormDesignType.instanceVersionPrev">
            <summary>
            NEW: Unique dateTime used to identify the immediate
            previous instance of an form instance. Used for tracking form responses
            across time and across multiple episodes of editing by end-users. This
            field must change for each edit session of a form instance.
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.approvalStatus">
            <summary>
            Describes report fitness for clinical or other action
            inProcess: currently being edited, users should not rely on results
            preliminary: report is awaiting final review and approval approved:
            report is fit for clinical or other action; often synonymous with final
            cancelled: report/procedure has been aborted before issued retracted:
            report has been deemed unfit for clinical or other action
            </summary>
        </member>
        <member name="P:SDC.Schema.FormDesignType.completionStatus">
            <summary>
            The extent to which a report contains all of the requested
            information pending: no information is yet available incomplete: some
            requested information is not yet available complete: all information is
            available in the requested report
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeOnEvent">
            <summary>
            Test whether OnEvent should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeinstanceVersion">
            <summary>
            Test whether instanceVersion should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeinstanceVersionPrev">
            <summary>
            Test whether instanceVersionPrev should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializechangedData">
            <summary>
            Test whether changedData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializenewData">
            <summary>
            Test whether newData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeapprovalStatus">
            <summary>
            Test whether approvalStatus should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializecompletionStatus">
            <summary>
            Test whether completionStatus should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeBeforeLoadForm">
            <summary>
            Test whether BeforeLoadForm should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeBeforeLoadData">
            <summary>
            Test whether BeforeLoadData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeBeforeShowForm">
            <summary>
            Test whether BeforeShowForm should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeBeforeDataSubmit">
            <summary>
            Test whether BeforeDataSubmit should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeBeforeCloseForm">
            <summary>
            Test whether BeforeCloseForm should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeHeader">
            <summary>
            Test whether Header should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeBody">
            <summary>
            Test whether Body should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeFooter">
            <summary>
            Test whether Footer should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeRules">
            <summary>
            Test whether Rules should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializelineage">
            <summary>
            Test whether lineage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeversion">
            <summary>
            Test whether version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeversionPrev">
            <summary>
            Test whether versionPrev should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializefullURI">
            <summary>
            Test whether fullURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializefilename">
            <summary>
            Test whether filename should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeformTitle">
            <summary>
            Test whether formTitle should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializebasedOnURI">
            <summary>
            Test whether basedOnURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeinstanceID">
            <summary>
            Test whether instanceID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FormDesignType.ShouldSerializeinstanceVersionURI">
            <summary>
            Test whether instanceVersionURI should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DemogFormDesignType">
            <summary>
            Start here. This is the top level of the DemogFormDesign object model.
            It is identical to FormDesignType except for the element name.
            It represents the definition for the information content of a single data-entry
            form.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.Nodes">
            <summary>
            Dictionary.  Given an Node ID (int), returns the Node's object reference.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.ParentNodes">
            <summary>
            Dictionary.  Given a NodeID, return the *parent* Node's object reference
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.Items">
            <summary>
            May hold one  or more of the following:
            ButtonAction (ButtonItemType),
            DisplayedItem (DisplayedType),
            InjectForm (InjectFormType),
            Question (QuestionItemType),
            Section(SectionItemType)
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.lineage">
            <summary>
            NEW: A text identifier that is used to group multiple
            versions of a single DE. The lineage is constant for all versions of a
            single kind of DE. When appended to @baseURI, it can be used to retrieve
            all versions of one particular DE.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.version">
            <summary>
            NEW: @version contains the version text for the current
            DE. It is designed to be used in conjuction with @baseURI and
            @lineage.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.versionPrev">
            <summary>
            NEW: Identify the immediate previous version of the
            current DE. The format is the same as version. The primary role of this
            optional attribute is to allow automated comparisons between a current
            DE and the immediate previous DE version. This is often helpful when
            deciding whether to adopt a newer version of a DE.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.fullURI">
            <summary>
            NEW: The full URI that uniquely identifies the current
            DE.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.basedOnURI">
            <summary>
            NEW: URI used to identify the DE that that this DE is
            based upon. In most cases, this should be a standard form that is
            modified and/or extended by the current DE. The current template reuses
            the basedOn IDs whenever the question/answer/semantic context is
            identical to the original.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataElementType.filename">
            <summary>
            NEW: filename to use when the current FormDesign instance
            is saved as a file. For forms containing responses, the filename may
            include the formInstanceVersionURI, but the naming convention may be
            use-case-specific.
            </summary>
        </member>
        <member name="M:SDC.Schema.DataElementType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataElementType.ShouldSerializelineage">
            <summary>
            Test whether lineage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataElementType.ShouldSerializeversion">
            <summary>
            Test whether version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataElementType.ShouldSerializeversionPrev">
            <summary>
            Test whether versionPrev should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataElementType.ShouldSerializefullURI">
            <summary>
            Test whether fullURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataElementType.ShouldSerializebasedOnURI">
            <summary>
            Test whether basedOnURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataElementType.ShouldSerializefilename">
            <summary>
            Test whether filename should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RetrieveFormPackageType.ShouldSerializeSubmissionRule">
            <summary>
            Test whether SubmissionRule should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RetrieveFormPackageType.ShouldSerializeComplianceRule">
            <summary>
            Test whether ComplianceRule should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RetrieveFormPackageType.ShouldSerializeSDCPackage">
            <summary>
            Test whether SDCPackage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RetrieveFormPackageType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageListType.ShouldSerializePackageItem">
            <summary>
            Test whether PackageItem should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageListType.ShouldSerializeHTML">
            <summary>
            Test whether HTML should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.MappingType">
            <summary>
            This type supports the mapping of the targeted template items to any other template items or code system.  The @type tokens include PrePop, AutoPop, SNOMED, LOINC, Keys, LocalValues, etc.
            </summary>
        </member>
        <member name="P:SDC.Schema.MappingType.DefaultCodeSystem">
            <summary>
            Specifies the default coding system to be implied for all MappedCode elements listed in thte ItemMap entries.  Any CodeSystem explicitly used in a MappedCode entry will override the default value.
            </summary>
        </member>
        <member name="P:SDC.Schema.MappingType.ItemMap">
            <summary>
            Entries under this element map a target item in a FormDesignTemplate to a terminology code, local value, XML-based document entry, database record, RDF store triple, etc.
            </summary>
        </member>
        <member name="M:SDC.Schema.MappingType.ShouldSerializeItemMap">
            <summary>
            Test whether ItemMap should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.MappingType.ShouldSerializeDefaultCodeSystem">
            <summary>
            Test whether DefaultCodeSystem should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.MappingType.ShouldSerializetemplateID">
            <summary>
            Test whether templateID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.MappingType.ShouldSerializetargetTemplateID">
            <summary>
            Test whether targetTemplateID should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ButtonItemType">
            <summary>
            The ButtonItem type represents a visual area for a user to click, and
            the click triggers a piece of "Action" code to run inside the form. The ButtonAction
            object may be represented with a visible button object, or some other type of visual
            paradigm. Other types of actions (e.g. key presses in a text field) may be handled
            with the form framework's event model.
            </summary>
        </member>
        <member name="P:SDC.Schema.ButtonItemType.Items">
            <summary>
            May contain multiple "OnClick" events:
            </summary>
        </member>
        <member name="M:SDC.Schema.ButtonItemType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.InjectFormType">
            <summary>
            CHANGED: This type represents a form or portion of a form that is
            imported into the current form at a specific location. It allows the composition of
            forms from other forms or parts of other forms. In practice, using an injected
            section will requiresome or all of the injected FormDesignXML to be injected under
            this the InjectForm element. For that reason, the schema supports those elements to
            appear inline. However, in a "raw" form (not yet filled out), the FormDesign element
            would generally be empty; only the top-level InjectFormType attributes would be used
            to point to the parts to be later injected. Form parts to be injected are specified
            by packageID, not FormID. This allows an injected form to be assocaited with helper
            files, or to return previosuly completed form parts containing responses.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.Item">
            <summary>
            Available Items are:
            FormDesign (FormDesignType),
            Question (QuestionItemType),
            Section (SectionItemType)
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.pkgFullURI">
            <summary>
            The injected package is retrieved form pkgManagerURI + "/"
            + pkgFullURI. If pkgFullURI is null, then then current form is used
            injection.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.rootItemID">
            <summary>
            The rootItemID is the ID of the form or form part that
            will be injected. It must point to a valid FormDesign, Section or
            Question element.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.pkgManagerURI">
            <summary>
            The server from which the injected package will be
            retrieved.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.X_pkgID">
            <summary>
            This ID represents the Package that contains the form to
            be injected. The package may contain an empty form or a form containing
            responses.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.X_pkgInstanceURI">
            <summary>
            NEW: Unique URI used to identify a unique instance of a
            package. Used for tracking form responses across time and across
            multiple episodes of editing by end-users. This URI does not change for
            each edit session of a package instance.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.X_pkgInstanceVersionURI">
            <summary>
            NEW: Unique URI used to identify a unique instance of a
            package's saved responses. It is used for tracking package responses
            across time and across multiple episodes of editing by end-users. This
            URI must change for each edit/save session of a package instance. It may
            be e.g., a new GUID, or a repeat of the pkgInstanceID followed by a
            version number.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.pkgBaseURI">
            <summary>
            DRAFT: The baseURI of the package, which indicates the
            home source of the package. The formManagerURP + pkgBaseURI + pkgID are
            concatenated to retrieve an empty form. formManagerURP + pkgBaseURI +
            pkgInstanceVersionURI are concatenated to retrieve a specific version of
            a populated form. formManagerURP + pkgBaseURI + pkgInstanceURI are
            concatenated to retrieve the latest instance of a populated
            form.
            </summary>
        </member>
        <member name="P:SDC.Schema.InjectFormType.X_injectionID">
            <summary>
            Unique ID (GUID) to distinguish multiple instances of the
            same injected node.
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializepkgFullURI">
            <summary>
            Test whether pkgFullURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializerootItemID">
            <summary>
            Test whether rootItemID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializepkgManagerURI">
            <summary>
            Test whether pkgManagerURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializeX_pkgID">
            <summary>
            Test whether X_pkgID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializeX_pkgInstanceURI">
            <summary>
            Test whether X_pkgInstanceURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializeX_pkgInstanceVersionURI">
            <summary>
            Test whether X_pkgInstanceVersionURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializepkgBaseURI">
            <summary>
            Test whether pkgBaseURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializeX_injectionID">
            <summary>
            Test whether X_injectionID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializerepeat">
            <summary>
            Test whether repeat should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializeinstanceGUID">
            <summary>
            Test whether instanceGUID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InjectFormType.ShouldSerializeparentGUID">
            <summary>
            Test whether parentGUID should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.SectionBaseType">
            <summary>
            This base item is the same as the SectionItemType, except it lacks the
            recursion created by the inclusion of MainItems sub-group.
            </summary>
        </member>
        <member name="P:SDC.Schema.SectionBaseType.ordered">
            <summary>
            If false, then the form implementation may change the
            order of items in the section.
            </summary>
        </member>
        <member name="M:SDC.Schema.SectionBaseType.ShouldSerializeordered">
            <summary>
            Test whether ordered should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SectionBaseType.ShouldSerializechangedData">
            <summary>
            Test whether changedData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SectionBaseType.ShouldSerializenewData">
            <summary>
            Test whether newData should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.SectionItemType">
            <summary>
            The Section is a grouper for all other types of objects. It may have a
            distinctive visual display (e.g. a box containing other displayed objects), and it
            may be used to treat Section descendants as a unit for special handling, such as
            hiding and showing.
            </summary>
        </member>
        <member name="M:SDC.Schema.SectionItemType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.QuestionItemType">
            <summary>
            Represents questions. Parent items may be Section, Question, and
            ListItem.
            </summary>
        </member>
        <member name="M:SDC.Schema.QuestionItemType.ShouldSerializeItem1">
            <summary>
            Test whether Item1 should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.QuestionItemBaseType">
            <summary>
            Represents questions. Parent items may be Section, Question, and
            ListItem.
            </summary>
        </member>
        <member name="P:SDC.Schema.QuestionItemBaseType.Item">
            <summary>
            May hold one of the following:
                ListField (ListFieldType)
                ResponseField (ResponseFieldType)
            </summary>
        </member>
        <member name="P:SDC.Schema.QuestionItemBaseType.readOnly">
            <summary>
            If @readOnly is set to true, the this field may not be
            edited by the user, and any default values set by template should be
            considered part of the stored data set responses, and transmitted by the
            SubmitForm transaction.
            </summary>
        </member>
        <member name="M:SDC.Schema.QuestionItemBaseType.ShouldSerializereadOnly">
            <summary>
            Test whether readOnly should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.QuestionItemBaseType.ShouldSerializechangedData">
            <summary>
            Test whether changedData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.QuestionItemBaseType.ShouldSerializenewData">
            <summary>
            Test whether newData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.QuestionItemBaseType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ListType">
            <summary>
            This type represents a list of specified answer choices. CHANGED
            9/20/2016: Fix for serialization error which aggregated all DisplayedItems at the
            top of the ListItems. A Schematron (or similar validation tool) will be required to
            ensure that at least 2 ListItems are present for single-select questions, and one
            ListItem for multi-select questions.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListType.QuestionListMembers">
            <summary>
            Replaces Items; ListItem or DisplayedItem
            </summary>
        </member>
        <member name="M:SDC.Schema.ListType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ListFieldType">
            <summary>
            ListField is a grouper for list-like answer choices, which may be
            derived from either a set of answer choice lists (a List composed of ListItems) or
            or a list obtained from a LookupEndpoint URI.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.LookupEndpoint">
            <summary>
            Replaces Item
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.ListHeaderText">
            <summary>
            The header row for a set of list items. If the list
            has more than one column, the column text is separated by the
            colTextDelimiter.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.DefaultCodeSystem">
            <summary>
            If coded values are used for items in a List
            (including ListItem and LookupEndPoint lists), then the default
            coding system should be specified here. For ListItem nodes, any
            exceptions to the coding system may be specified on the individual
            ListItem nodes. For LookupEndPoints, the endpoint data can
            optionally specify any exceptions in a dedicated CodeSystem column
            in the returned list data.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.AfterChange">
            <summary>
            Event that occurs after List Field selections are
            changed.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.colTextDelimiter">
            <summary>
            Character in the DisplayText that separates the columns
            and rows in a single or multi-column list.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.numCols">
            <summary>
            Number of columns in the list
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.storedCol">
            <summary>
            Determines which column of the list is stored in a
            database. This list is one-based.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.minSelections">
            <summary>
            Minimum number of answer choices (list items) that must be
            selected by the user. Default value is 1. NEW: changed minimum value to
            1. Removed: If set to 0, then this question need not be answered by the
            user.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.maxSelections">
            <summary>
            Maximum number of answer choices (list items) that can be
            selected by the user. Must be greater than or equal to minSelections,
            and no larger than the total number of list items. A value of 0
            indicates no limit to the number of selected list items (answers). This
            effectively means that the question is multi-select. (Abbreviated as QM)
            A value of 1 (the default) indicates that the question list is
            single-select. (Abbreviated as QS)
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.ordered">
            <summary>
            If false, then the form implementation may change the
            order of items in the list.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListFieldType.defaultListItemDataType">
            <summary>
            This attribute contains an SDC datatype enumeration. The
            selected value is the datatype of the content for all
            ListItem/@associatedValue content in the current List. It is used
            instead of associatedValueType. This element is used only if the
            ListItems are all associated with coded values from a single coding
            system. If associatedValueType on a ListItem has a datatype assigned,
            then the latter datatype overrides the content in
            defaultListItemDataType.
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeIllegalListItemPairings">
            <summary>
            Test whether IllegalListItemPairings should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeIllegalCoSelectedListItems">
            <summary>
            Test whether IllegalCoSelectedListItems should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeAfterChange">
            <summary>
            Test whether AfterChange should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeOnEvent">
            <summary>
            Test whether OnEvent should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeminSelections">
            <summary>
            Test whether minSelections should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializemaxSelections">
            <summary>
            Test whether maxSelections should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeordered">
            <summary>
            Test whether ordered should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeListHeaderText">
            <summary>
            Test whether ListHeaderText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeDefaultCodeSystem">
            <summary>
            Test whether DefaultCodeSystem should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializecolTextDelimiter">
            <summary>
            Test whether colTextDelimiter should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListFieldType.ShouldSerializedefaultListItemDataType">
            <summary>
            Test whether defaultListItemDataType should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ListItemType">
            <summary>
            ListItem elements represent answer choices that may appear under a
            Question.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemType.ChildItemsNode">
             <summary>
             The ChildItems node replaces "Item" (MainNodesType), and may contain:
            "ButtonAction", typeof(ButtonItemType),
            "DisplayedItem", typeof(DisplayedType),
            "InjectForm", typeof(InjectFormType),
            "Question", typeof(QuestionItemType),
            "Section", typeof(SectionItemType),
             </summary>
        </member>
        <member name="M:SDC.Schema.ListItemType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ListItemBaseType">
            <summary>
            This base element is the foundation for ListItems, but does not
            include the MainItems sub-group under each ListItem.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.ListItemResponseField">
            <summary>
            A place to enter values (of any data type) that are
            directly associated with, and attached to, a selected answer
            choice.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.selected">
            <summary>
            Represents the default value of the ListItem in the
            FormDesign template, or the user's response in selecting one or more
            ListItems. If @multiSelect='false' on ListField then only one item may
            be selected.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.selectionDisablesChildren">
            <summary>
            If set to true, then selecting this ListItem must
            deactivate all descendant parts of the form, and ignore any user-entered
            values in the deactivated part. Deselecting the ListItem should
            reactivate the descendant items in their state at the time the items
            were deactivated. If items are disabled, then any data stored in the
            disabled questions should be removed.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.selectionActivatesItems">
            <summary>
            NEW Selecting the current ListItem will enable the named
            items in this attribute's content. Prefixing any named with a hyphen (-)
            will reverse the above behaviour (i.e., the named items will be
            disabled). Unselecting the ListItem will reverse this behaviour.
            Prefixing the name with a tilde (~) will supress this reversal behavior.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.selectionSelectsListItems">
            <summary>
            NEW Selecting the current ListItem will select the named
            ListItems in this attribute's content. Prefixing any named with a hyphen
            (-) will reverse the above behaviour. Unselecting the ListItem will
            reverse this behaviour. Prefixing the name with a tilde (~) will
            suppress this reversal behavior.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.selectionDeselectsSiblings">
            <summary>
            If the ancestor ListField has @multiselect = 'true', then
            selecting this ListItem should de-select all other ListItem (sibling)
            nodes except the current one.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.omitWhenSelected">
            <summary>
            If @omitWhenSelected is set to true, then the question and
            its response(s) should not be present in a typical report derived from
            this template. This attribute is usually set to true when the answer
            choice is used to control form behavior (e.g., skip logic), or when the
            question provides unhelpful "negative" information about actions that
            did not occur or were not performed, or things that were not observed or
            could not be assessed. If @omitWhenSelectedset is false (default) then
            the question and its response(s) should appear in the report. Added
            11/29/15 to replace @reportAction
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.associatedValue">
            <summary>
            A typed value (e.g., an integer) that is uniquely
            associated with a ListItem. An example is the integer 10 for a ListItem
            with title that reads "10 o'clock". Typically these values are set to be
            used in calculations or other algorithms. In general, they can be
            treated something like a user-entered response on a the
            ListItemResponseField of a selected ListItem. This field should not be
            used for terminologies or local codes. The CodedValue type should be
            used for these kinds of metadata. This field should also not be used
            other properties such as translations, usage, etc. The data type shoudl
            be specified in @AssociatedValueType
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemBaseType.associatedValueType">
            <summary>
            The data type of @AssociatedValue. Default is
            string.
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeOnSelect">
            <summary>
            Test whether OnSelect should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeOnDeselect">
            <summary>
            Test whether OnDeselect should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeselected">
            <summary>
            Test whether selected should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeselectionDisablesChildren">
            <summary>
            Test whether selectionDisablesChildren should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeselectionDeselectsSiblings">
            <summary>
            Test whether selectionDeselectsSiblings should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeomitWhenSelected">
            <summary>
            Test whether omitWhenSelected should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeListItemResponseField">
            <summary>
            Test whether ListItemResponseField should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeSelectIf">
            <summary>
            Test whether SelectIf should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeDeselectIf">
            <summary>
            Test whether DeselectIf should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeselectionActivatesItems">
            <summary>
            Test whether selectionActivatesItems should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeselectionSelectsListItems">
            <summary>
            Test whether selectionSelectsListItems should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializerepeat">
            <summary>
            Test whether repeat should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeinstanceGUID">
            <summary>
            Test whether instanceGUID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeparentGUID">
            <summary>
            Test whether parentGUID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeassociatedValue">
            <summary>
            Test whether associatedValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemBaseType.ShouldSerializeassociatedValueType">
            <summary>
            Test whether associatedValueType should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.LookupEndPointType">
            <summary>
            LookupEndPointType represents list items that are derived from a web
            service call of some type, instead of an explicit set of ListItem nodes specified in
            the FormDesign XML. The endpoint must return a list separated into individual list
            items by the @colTextDelimiter value specified in the parent
            ListFieldType.
            </summary>
        </member>
        <member name="P:SDC.Schema.LookupEndPointType.ResponseValue">
            <summary>
            The user's response to the lookup list. The response
            is recorded as a coding, terminology, classification, keyword, or
            local value. Multiple selections from the lookup list may be
            allowed.
            </summary>
        </member>
        <member name="M:SDC.Schema.LookupEndPointType.ShouldSerializeResponseValue">
            <summary>
            Test whether ResponseValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.LookupEndPointType.ShouldSerializeincludesHeaderRow">
            <summary>
            Test whether includesHeaderRow should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ListItemResponseFieldType">
            <summary>
            This type represents a place to store a fill-in response associated
            directly with a selected ListItem. The response may be optional or
            required.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemResponseFieldType.responseRequired">
            <summary>
            If @responseRequired is set to true, then the appropriate
            text or Blob must be entered in the data-entry field associated with
            this list item.
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemResponseFieldType.ShouldSerializeresponseRequired">
            <summary>
            Test whether responseRequired should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ResponseFieldType">
            <summary>
            This type is a template for a data entry field that accepts entries
            (responses or answers) of any data type, including text, numbers, dates, and Base 64
            - encoded blobs (images, sounds, video, other binary formats, etc.). This type
            cannot contain ListItems, but it may be a child of a Question or a
            ListItem.
            </summary>
        </member>
        <member name="P:SDC.Schema.ResponseFieldType.Response">
            <summary>
            W3C Schema data type details
            </summary>
        </member>
        <member name="P:SDC.Schema.ResponseFieldType.TextAfterResponse">
            <summary>
            TextAfterResponse is fixed text that appears after (to
            the right of) the user's response on the data entry form. This may
            be text for units such as "mm", "cm", etc.
            </summary>
        </member>
        <member name="P:SDC.Schema.ResponseFieldType.AfterChange">
            <summary>
            Event that occurs after the Response value is changed,
            usually fired after a user leaves the Response
            field.
            </summary>
        </member>
        <member name="M:SDC.Schema.ResponseFieldType.ShouldSerializeAfterChange">
            <summary>
            Test whether AfterChange should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ResponseFieldType.ShouldSerializeOnEvent">
            <summary>
            Test whether OnEvent should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ResponseFieldType.ShouldSerializeResponse">
            <summary>
            Test whether Response should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ResponseFieldType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ResponseFieldType.ShouldSerializeTextAfterResponse">
            <summary>
            Test whether TextAfterResponse should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ResponseFieldType.ShouldSerializeResponseUnits">
            <summary>
            Test whether ResponseUnits should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.UnitsType">
            <summary>
            UnitsType represents the measurement standard and its abbreviated notation for quantifiable objects, e.g., miles, km, mm, cm, etc. The default system for standard notations is UCUM.
            </summary>
        </member>
        <member name="M:SDC.Schema.UnitsType.ShouldSerializeunitSystem">
            <summary>
            Test whether unitSystem should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.IETresetCounter">
            <summary>
            Static counter that resets with each new instance of an IdentifiedExtensionType (IET).
            Maintains the sequence of all elements nested under an IET-derived element.
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.SubIETcounter">
            <summary>
            Field to hold the ordinal position of an object (XML element) under an IdentifiedExtensionType (IET)-derived object.
            This number is used for creating the name attribute suffix.
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.DotLevel">
            <summary>
             Hierarchical level using nested dot notation
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.BaseName">
            <summary>
            The root text ("shortName") used to construct the name property.  The code may add a prefix and/or suffix to BaseName
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.ElementName">
            <summary>
            The name of XML element that is output from this class instance.
            Some SDC types are used in conjunction with multiple element names.  
            The auto-generated classes do not provide a way to determine the element name form the class instance.
            This property allows the code whichj creates each object to specify the element names that it is adding 
            as each object is creeated in code.  Although it may be possible to achieve this effect by reflection of 
            attributes, this ElementName approach provides more flexibility and is probably more efficient.
            ElementName will be most useful for auto-generating @name attributes for some elements.
            In many cases, ElementName will be assigned through class constructors, but it can also be assigned 
            through this property after the object is instantiated
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.ElementOrder">
            <summary>
            NEW
            For the SDC property's XML element, returns the Order value from the property's XMLElementAttribute
            Assigned by reflection at the time of object creation.
            TODO: Add to IBaseType
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.ElementIndex">
            <summary>
            NEW
            For the SDC property's XML element, if the property is found inside a List object.
            Return -1 if this object is not found inside a List object.
            TODO: Add to IBaseType
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.ElementPrefix">
            <summary>
            The prefix used 
            in the @name attribute that is output from this class instance
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.ParentID">
            <summary>
            Returns the ID of the parent object (representing the parent XML element)
            This is the ObjectID, which is a sequentially assigned integer value.
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.ParentNode">
            <summary>
            Retrieve the BaseType object that is the immediate parent of the current object in the object tree
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.PackageNode">
            <summary>
            Retrieve the BaseType object that is the SDC Package containing the current object in the object tree
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.ParentIETypeID">
            <summary>
            Returns the ID property of the closest ancestor of type IdentifiedExtensionType.  
            For eCC, this is the Parent node's ID, which is derived from  the parent node's CTI_Ckey, a.k.a. ParentItemCkey.
            </summary>
        </member>
        <member name="M:SDC.Schema.BaseType.ResetSdcImport">
            <summary>
            Resets TopNode and IETresetCounter.  This allows the creation of a new SDC tree for unit testing
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.name">
            <summary>
            @name is a developer assigned unique identifier, similar to a unique control/object/variable name, used to provide the ability for programmatic manipulation of an element.  The value of name must be unique within an FDF and FDF-R, even when FDF sections are repeated in the XML.  @name values may begin with a letter or an underscore and may only contain characters that are legal for variable names.  These generally include letters, numbers and underscore.  The use of other characters may result in errors, depending on the programming language employed.  Since XML is case-sensitive, names should not be made unique solely on the basis of alphabetic case, since many programming languages are case insensitive and cannot distinguish names based only on case differences.
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.type">
            <summary>
            The @type attribute can contain custom metadata "tokens" for the element, chosen from a standardized list of terms. Tokens are short alphanumeric text strings, defined by the W3C Schema NMTOKEN specification, that are defined in an Implementation Guide. The type xsd:NMTOKEN represents a single string token. NMTOKEN values may consist of letters, digits, periods ( . ), hyphens ( - ), underscores ( _ ), and colons ( : ). They may start with any of these characters. (www.datypic.com/sc/xsd/t-xsd_NMTOKEN.html) @type tokens may be specific for one or more kinds of SDC elements. Multiple tokens in the type attribute should be separated by whitespace. Type tokens may be used to specify special handling by an application, and are usually used to define form display constraints, but may include other custom metadata as well. Style metadata should generally be handled with @styleClass rather than @type. @type token examples include: tooltip, statusLineText, alignTopLeft, align:bottom, _pageBreak-after, etc. @type metadata should generally not affect the information content of a form.
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.styleClass">
            <summary>
            @styleClass is a developer assigned class name for display styling, generally for use with an external style sheet..
            </summary>
        </member>
        <member name="P:SDC.Schema.BaseType.order">
            <summary>
            @order is a decimal attribute that allows the form template developer to define a sequential order for elements in a template. This serves the purpose of providing a definitive/original order to sections, questions, answer choices, etc., when required for display purposes. This is important when the original XML ordering may become disrupted due to the use of an implementation technology that does not natively support ordering (e.g., object collections), and it can also provide a check on the proper importing of the XML tree during implementation.
            </summary>
        </member>
        <member name="M:SDC.Schema.BaseType.ShouldSerializeorder">
            <summary>
            Test whether order should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BaseType.ShouldSerializename">
            <summary>
            Test whether name should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BaseType.ShouldSerializetype">
            <summary>
            Test whether type should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BaseType.ShouldSerializestyleClass">
            <summary>
            Test whether styleClass should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ExtensionBaseType.ShouldSerializeComment">
            <summary>
            Test whether Comment should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ExtensionBaseType.ShouldSerializeExtension">
            <summary>
            Test whether Extension should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ExtensionBaseType.ShouldSerializeProperty">
            <summary>
            Test whether Property should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ExtensionType">
            <summary>
            Similar to the Schema type xs:anyType, but requires strict validation, and includes optional baseAttributes. Developer will need to declare a namespace and provide a Schema to validate the contents.
            </summary>
        </member>
        <member name="M:SDC.Schema.ExtensionType.ShouldSerializeAny">
            <summary>
            Test whether Any should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ExtensionType.ShouldSerializeAnyAttr">
            <summary>
            Test whether AnyAttr should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PropertyType">
            <summary>
            MOVED: From SDCFormDesign
            CHANGED:
            Property is any type of data that is associated with any form item (e.g., section, question, list item) in any context.  The Property context is specified by the @type attribute.  Examples of @type values may include:
            -alternate language representations, e.g., 'spanish'
            -'instruction'
            -'tooltip'
            -'help' for a pop-up help box
            -'outlining' (such as question numbering)
            
            The @type enumerations must be defined and documented for the particular use case, and are currently out of scope in this schema definition.  Multiple type tokens for a single element are supported.
            
            RENAMED:  'OtherText' to 'Property' 9/14/2016
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyType.TypedValue">
            <summary>
            Contains optional typed data.
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyType.propName">
            <summary>
            NEW
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyType.propClass">
            <summary>
            NEW
            </summary>
        </member>
        <member name="M:SDC.Schema.PropertyType.ShouldSerializeTypedValue">
            <summary>
            Test whether TypedValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PropertyType.ShouldSerializepropName">
            <summary>
            Test whether propName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PropertyType.ShouldSerializepropClass">
            <summary>
            Test whether propClass should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PropertyType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CommentType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.IdentifiedExtensionType">
            <summary>
            This is the base type for all subtypes that require a unique URI identifier.
            </summary>
        </member>
        <member name="M:SDC.Schema.IdentifiedExtensionType.ShouldSerializeID">
            <summary>
            Test whether ID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.IdentifiedExtensionType.ShouldSerializebaseURI">
            <summary>
            Test whether baseURI should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RepeatingType">
            <summary>
            This type presents any display objects that may be repeated based upon
            on the user's interaction with the form objects. Items derived from this type
            include Sections and Questions.
            </summary>
        </member>
        <member name="P:SDC.Schema.RepeatingType.minCard">
            <summary>
            @minCard is the minimum number of repetitions allowed for
            a section or question. The default value is 1, indicating that the user
            must answer any question(s) that has this attribute set. If @minCard is
            set to 0, then the item and all descendent questions are optional to
            answer.
            </summary>
        </member>
        <member name="P:SDC.Schema.RepeatingType.maxCard">
            <summary>
            @maxCard is the maximum number of repetitions allowed for
            a section or question. The default value is 1, indicating that the
            section or question cannot be repeated on the data entry form. A value
            of 0 indicates that the number of repeats is unlimited. If @maxCard is
            not 0, then Must be greater than or equal to minCard.
            </summary>
        </member>
        <member name="M:SDC.Schema.RepeatingType.ShouldSerializeminCard">
            <summary>
            Test whether minCard should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RepeatingType.ShouldSerializemaxCard">
            <summary>
            Test whether maxCard should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RepeatingType.ShouldSerializerepeat">
            <summary>
            Test whether repeat should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RepeatingType.ShouldSerializeinstanceGUID">
            <summary>
            Test whether instanceGUID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RepeatingType.ShouldSerializeparentGUID">
            <summary>
            Test whether parentGUID should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ChildItemsType">
            <summary>
            ChildItems have descendants that are of type DisplayedType. They may
            include primary items of type SectionType, QuestionType, InjectFormType,
            DisplayedType and ButtonType, in any order. The ChildItem separates new child
            primary items from elements and attributes that are sub-parts of the parent primary
            item.
            </summary>
        </member>
        <member name="P:SDC.Schema.ChildItemsType.Items">
            <summary>
            May hold one  or more of the following:
            ButtonAction (ButtonItemType),
            DisplayedItem (DisplayedType),
            InjectForm (InjectFormType),
            Question (QuestionItemType),
            Section(SectionItemType),
            </summary>
        </member>
        <member name="M:SDC.Schema.ChildItemsType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DisplayedType">
            <summary>
            This type represents any object that is designed to have a visual
            presence on a form, e.g., Sections, Questions, ListItems, Notes and Blobs. (Other
            items not inheriting this type may use an optional styleClass
            attribute.)
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.Link">
            <summary>
            Link to external information.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.BlobContent">
            <summary>
            Blob information associated with the current
            DisplayedType. The blob may contain any type of special media, but
            must be base 64 encoded.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.Contact">
            <summary>
            Any desired contact information regarding, e.g., the
            form item, authoring process, certifications, code or coding
            processs.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.CodedValue">
            <summary>
            Coding, terminology, classification, keyword, or local
            values
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.OnEvent">
            <summary>
            Generic event handler - eventName must be
            specified.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.ActivateIf">
            <summary>
            Activate the DisplayedType item if the guard
            conditions are met.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.DeActivateIf">
            <summary>
            DeActivate the DisplayedType item if the guard
            conditions are met.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.title">
            <summary>
            The primary text to show on the form. Also known as
            "prompt" or "label" or "visibleText" or "caption"
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.enabled">
            <summary>
            Determines whether the user can interact with the
            displayed item when the form is first displayed. All disabled items are
            treated as read-only: they are visible but may not be edited. The
            attribute value is inherited by descendants.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.visible">
            <summary>
            Determines whether the item should be visible on a
            computer screen when the form is first displayed. The attribute value is
            inherited by descendants.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.mustImplement">
            <summary>
            If this attribute is set to "true" (the default), then the
            form implementation must make this item available for use on the form.
            If this attribute is set to "false" on a parent or ancestor item, then
            all child/descendant items inherit this "false" setting, even if they
            have this attribute set to "true." In other words, the child/descendent
            items do not need to be implemented if any parent/ancestor item has this
            attribute set to false.
            </summary>
        </member>
        <member name="P:SDC.Schema.DisplayedType.showInReport">
            <summary>
            CHANGED to T/F/Optional If @showInReport on a Question is
            false, then the Question and its ListItems (if any) should not be
            present in a typical report derived from this template. If this
            attribute appears on a ListItem, then the entire question and all
            ListItems should be omitted from the report. If this attribute appears
            on a Section, then the entire Section and all Section contents
            (descendents) should be omitted from the report. If @showInReport
            appears on a DisplayedItem, then the DisplayedItem should be omitted
            from the report. This attribute is usually set to false when a Question
            is used to control form behavior (e.g., skip logic), or when the
            Question provides unhelpful "negative" information about actions that
            did not occur or were not performed, or things that were not
            observed.
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeLink">
            <summary>
            Test whether Link should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeBlobContent">
            <summary>
            Test whether BlobContent should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeContact">
            <summary>
            Test whether Contact should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeCodedValue">
            <summary>
            Test whether CodedValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeOnEnter">
            <summary>
            Test whether OnEnter should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeOnExit">
            <summary>
            Test whether OnExit should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeOnEvent">
            <summary>
            Test whether OnEvent should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeenabled">
            <summary>
            Test whether enabled should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializevisible">
            <summary>
            Test whether visible should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializemustImplement">
            <summary>
            Test whether mustImplement should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeshowInReport">
            <summary>
            Test whether showInReport should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeActivateIf">
            <summary>
            Test whether ActivateIf should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializeDeActivateIf">
            <summary>
            Test whether DeActivateIf should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DisplayedType.ShouldSerializetitle">
            <summary>
            Test whether title should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.BlobType">
            <summary>
            Standard structure for including Binary Large Objects (Blobs) in XML
            templates. Blobs can handle any type of binary media, such as images, audio, video,
            and data streams of any specified format (such as a MIME type).
            </summary>
        </member>
        <member name="P:SDC.Schema.BlobType.Hash">
            <summary>
            Binary hash of the blob data
            </summary>
        </member>
        <member name="P:SDC.Schema.BlobType.Item">
            <summary>
            May be one of the following:
            BinaryMediaBase64 (base64Binary_Stype),
            BlobURI (anyURI_Stype)
            </summary>
        </member>
        <member name="P:SDC.Schema.BlobType.mediaType">
            <summary>
            TBD: Must be a valid MIME type - needs enumeration
            </summary>
        </member>
        <member name="P:SDC.Schema.BlobType.fileExtension">
            <summary>
            Use a common file extension (e.g., docx) if there is no @MIME_Type available
            </summary>
        </member>
        <member name="M:SDC.Schema.BlobType.ShouldSerializeDescription">
            <summary>
            Test whether Description should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BlobType.ShouldSerializeHash">
            <summary>
            Test whether Hash should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BlobType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BlobType.ShouldSerializemediaType">
            <summary>
            Test whether mediaType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BlobType.ShouldSerializefileExtension">
            <summary>
            Test whether fileExtension should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.LinkType">
            <summary>
            A hyperlink to an Internet endpoint such as a web page or web service.
            </summary>
        </member>
        <member name="P:SDC.Schema.LinkType.LinkText">
            <summary>
            A description of the URI link, usually for display purposes.
            </summary>
        </member>
        <member name="P:SDC.Schema.LinkType.LinkURI">
            <summary>
            Link to external information.
            </summary>
        </member>
        <member name="M:SDC.Schema.LinkType.ShouldSerializeLinkText">
            <summary>
            Test whether LinkText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.LinkType.ShouldSerializeLinkURI">
            <summary>
            Test whether LinkURI should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.CodingType">
            <summary>
            This type represents any type of coding, terminology, classification, keyword, or local value system that may be applied to any displayable item in a
            FormDesign template.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodingType.Code">
            <summary>
            A standard code, or a local value from a custom coding system, that can be used to consistently identify, or provide a
            standard value for, the coded item.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodingType.TypedValue">
            <summary>
            Data type enumeration derived from W3C XML Schema. If
            the code is derived from a local value system (e.g., numbered answer
            choices such as clock positions, tumor grades, or clinical scoring
            systems), then the data type of the local value may be specified
            here. This may be important if the code value will need to be
            manipulated mathematically.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodingType.CodeText">
            <summary>
            The human readable text that accompanies the assigned code and represents the code's precise meaning (semantics) or
            usage.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodingType.CodeMatch">
            <summary>
            Degree of match between the mapped item and the assigned code - @codeMatchType holds an entry from an enumerated
            list of match types.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodingType.CodeURI">
            <summary>
            NEW: Web resource that provides information about the code
            </summary>
        </member>
        <member name="M:SDC.Schema.CodingType.ShouldSerializeCode">
            <summary>
            Test whether Code should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodingType.ShouldSerializeTypedValue">
            <summary>
            Test whether TypedValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodingType.ShouldSerializeCodeText">
            <summary>
            Test whether CodeText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodingType.ShouldSerializeCodeMatch">
            <summary>
            Test whether CodeMatch should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodingType.ShouldSerializeCodeSystem">
            <summary>
            Test whether CodeSystem should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodingType.ShouldSerializeCodeURI">
            <summary>
            Test whether CodeURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodingType.ShouldSerializeUnits">
            <summary>
            Test whether Units should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.CodeMatchType.CodingMatchComment">
            <summary>
            Comment about the degree of match between the mapped item and the assigned
            code.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodeMatchType.codeMatchEnum">
            <summary>
            The degree of match between the coded item and the assigned code.
            </summary>
        </member>
        <member name="M:SDC.Schema.CodeMatchType.ShouldSerializecodeMatchEnum">
            <summary>
            Test whether codeMatchEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodeMatchType.ShouldSerializeCodingMatchComment">
            <summary>
            Test whether CodingMatchComment should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.CodeSystemType">
            <summary>
            This type represents information about the coding system used in CodingType. It may refer to any type of coding, terminology, classification, keyword, or local value system.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodeSystemType.CodeSystemName">
            <summary>
            The name of the coding system, as recommended by the
            coding system curators, or as recommended by the agency that creates
            standards for the code map in use.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodeSystemType.ReleaseDate">
            <summary>
            The day that the selected version of the coding system was released for general use by the coding system curators.
            </summary>
        </member>
        <member name="P:SDC.Schema.CodeSystemType.Version">
            <summary>
            Version of the coding system, using the version format defined by the coding system
            </summary>
        </member>
        <member name="P:SDC.Schema.CodeSystemType.OID">
            <summary>
            The ISO object identifier (OID) for the coding system, as found at the HL7 OID Registry: https://www.hl7.org/oid/index.cfm
            </summary>
        </member>
        <member name="P:SDC.Schema.CodeSystemType.CodeSystemURI">
            <summary>
            Web resource that uniquely identifies the coding system
            </summary>
        </member>
        <member name="M:SDC.Schema.CodeSystemType.ShouldSerializeCodeSystemName">
            <summary>
            Test whether CodeSystemName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodeSystemType.ShouldSerializeReleaseDate">
            <summary>
            Test whether ReleaseDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodeSystemType.ShouldSerializeVersion">
            <summary>
            Test whether Version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodeSystemType.ShouldSerializeOID">
            <summary>
            Test whether OID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CodeSystemType.ShouldSerializeCodeSystemURI">
            <summary>
            Test whether CodeSystemURI should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DataTypes_DEType">
            <summary>
            MOVED from SDCDataTypes:
            SDC datatypes for Data Entry (DE), based mostly on W3C specifications. Uses baseAttributes  and Extension capability to enhance the list of Data Types. Includes additonal metadata to specify data input restrictions for data entry forms, and to aid in validation of IHE RFD SubmitForm responses in XML instance documents.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataTypes_DEType.DataTypeDE_Item">
            <summary>
            any *_DEType data type
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypes_DEType.ShouldSerializeItemElementName">
            <summary>
            Test whether ItemElementName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypes_DEType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.anyType_DEtype.namespace">
            <summary>
            Namespace used in an XML Schema file, if any, used to constrain and validate the the content of this field.  This is similar to the use of namespaces with the xs:any element in XML Schemas.
            
            See: http://www.w3.org/TR/xmlschema-0/#any
            </summary>
        </member>
        <member name="M:SDC.Schema.anyType_DEtype.ShouldSerializeAny">
            <summary>
            Test whether Any should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyType_DEtype.ShouldSerializeAnyAttr">
            <summary>
            Test whether AnyAttr should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyType_DEtype.ShouldSerializeminLength">
            <summary>
            Test whether minLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyType_DEtype.ShouldSerializemaxLength">
            <summary>
            Test whether maxLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyType_DEtype.ShouldSerializeschema">
            <summary>
            Test whether schema should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyType_DEtype.ShouldSerializenamespace">
            <summary>
            Test whether namespace should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DataTypes_SType">
            <summary>
            MOVED from SDCDataTypes:
            SDC datatypes in Simple (S) format, based mostly on W3C specifications.  Uses baseAttributes and Extension capability to enhance the list of Data Types.        **CHECK for ERRORS and completeness**
            </summary>
        </member>
        <member name="P:SDC.Schema.DataTypes_SType.DataTypeS_Item">
            <summary>
            any *_SType data type
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypes_SType.ShouldSerializeItemElementName">
            <summary>
            Test whether ItemElementName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypes_SType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyURI_DEtype.ShouldSerializeX_length">
            <summary>
            Test whether X_length should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyURI_DEtype.ShouldSerializeminLength">
            <summary>
            Test whether minLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyURI_DEtype.ShouldSerializemaxLength">
            <summary>
            Test whether maxLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyURI_DEtype.ShouldSerializedescription">
            <summary>
            Test whether description should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyURI_DEtype.ShouldSerializepattern">
            <summary>
            Test whether pattern should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.anyURI_Stype.mediaType">
            <summary>
            TBD: Must be a valid Media (MIME) type
            </summary>
        </member>
        <member name="M:SDC.Schema.anyURI_Stype.ShouldSerializemediaType">
            <summary>
            Test whether mediaType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.anyURI_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.base64Binary_DEtype.ShouldSerializeminLength">
            <summary>
            Test whether minLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.base64Binary_DEtype.ShouldSerializemaxLength">
            <summary>
            Test whether maxLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.base64Binary_DEtype.ShouldSerializedescription">
            <summary>
            Test whether description should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.base64Binary_Stype.mediaType">
            <summary>
            TBD: Must be a valid Media (MIME) type
            </summary>
        </member>
        <member name="M:SDC.Schema.base64Binary_Stype.ShouldSerializemediaType">
            <summary>
            Test whether mediaType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.boolean_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.byte_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.date_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializepattern">
            <summary>
            Test whether pattern should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTime_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTimeStamp_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTimeStamp_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTimeStamp_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTimeStamp_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTimeStamp_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dateTimeStamp_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dayTimeDuration_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.decimal_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.double_Stype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.duration_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.float_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gDay_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonth_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gMonthDay_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYear_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.gYearMonth_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.hexBinary_DEtype.ShouldSerializeminLength">
            <summary>
            Test whether minLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.hexBinary_DEtype.ShouldSerializemaxLength">
            <summary>
            Test whether maxLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.hexBinary_DEtype.ShouldSerializedescription">
            <summary>
            Test whether description should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.hexBinary_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.hexBinary_Stype.mimeType">
            <summary>
            TBD: Must be a valid MIME type - needs
            enumeration
            </summary>
        </member>
        <member name="M:SDC.Schema.hexBinary_Stype.ShouldSerializemimeType">
            <summary>
            Test whether mimeType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.HTML_DEtype.ShouldSerializeminLength">
            <summary>
            Test whether minLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.HTML_DEtype.ShouldSerializemaxLength">
            <summary>
            Test whether maxLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.HTML_Stype.ShouldSerializeAny">
            <summary>
            Test whether Any should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.HTML_Stype.ShouldSerializeAnyAttr">
            <summary>
            Test whether AnyAttr should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.int_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.integer_Stype.valDec">
            <summary>
            Added to support proper decimal set/get; 
            Decimal is the best data type to match W3C integer.
            This will not work with XML serializer, bc decimal types always serialize trailing zeros,
            and trailing zeros are not allowed with integer types
            TODO: Need to truncate (or possibly round) any digits after the decimal point in the setter/getter
            For positive/negative etc integers, need to check the sign and throw error if incorrect.
            May want to throw errors for for min/max allowed values also - not sure about this)
            May need to import System.Numerics.dll to use BigInteger
            </summary>
            
        </member>
        <member name="M:SDC.Schema.integer_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.integer_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.long_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.negativeInteger_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonNegativeInteger_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.nonPositiveInteger_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.positiveInteger_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.short_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.string_DEtype.ShouldSerializeminLength">
            <summary>
            Test whether minLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.string_DEtype.ShouldSerializemaxLength">
            <summary>
            Test whether maxLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.string_DEtype.ShouldSerializepattern">
            <summary>
            Test whether pattern should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.string_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.string_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.time_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedByte_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedByte_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedByte_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedByte_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedByte_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedByte_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedByte_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedInt_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedLong_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.unsignedShort_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XML_DEtype.ShouldSerializeminLength">
            <summary>
            Test whether minLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XML_DEtype.ShouldSerializemaxLength">
            <summary>
            Test whether maxLength should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XML_Stype.ShouldSerializeAny">
            <summary>
            Test whether Any should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XML_Stype.ShouldSerializeschema">
            <summary>
            Test whether schema should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializeminInclusive">
            <summary>
            Test whether minInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializemaxInclusive">
            <summary>
            Test whether maxInclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializeminExclusive">
            <summary>
            Test whether minExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializemaxExclusive">
            <summary>
            Test whether maxExclusive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_DEtype.ShouldSerializemask">
            <summary>
            Test whether mask should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_Stype.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.yearMonthDuration_Stype.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ItemNameType">
            <summary>
            Moved from SDCFormDesign
            The type is a standard way to point to a named item anywhere in a FormDesign template.  A named item is any element that has the @name attribute set to a unique value.
            </summary>
        </member>
        <member name="P:SDC.Schema.ItemNameType.itemName">
            <summary>
            The @name attribute of the referenced element.
            </summary>
        </member>
        <member name="M:SDC.Schema.ItemNameType.ShouldSerializeitemName">
            <summary>
            Test whether itemName should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ItemNameAttributeType">
            <summary>
            Moved from SDCFormDesign
            The type is a standard way to point to a named item anywhere in a FormDesign template.  A named item is any element that has the @name attribute set to a unique value.
            </summary>
        </member>
        <member name="M:SDC.Schema.ItemNameAttributeType.ShouldSerializeattributeName">
            <summary>
            Test whether attributeName should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.NameType">
            <summary>
            Structure to define a person's name, including prefixes, suffixes, and degrees.
            </summary>
        </member>
        <member name="P:SDC.Schema.NameType.DegreeCert">
            <summary>
            Acronyms for degrees and certifications, e.g., MD, PhD, FACP (repeat element for each acronym)
            </summary>
        </member>
        <member name="M:SDC.Schema.NameType.ShouldSerializeDegreeCert">
            <summary>
            Test whether DegreeCert should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.NameType.ShouldSerializeNamePrefix">
            <summary>
            Test whether NamePrefix should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.NameType.ShouldSerializeFirstName">
            <summary>
            Test whether FirstName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.NameType.ShouldSerializeMiddleName">
            <summary>
            Test whether MiddleName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.NameType.ShouldSerializeLastName">
            <summary>
            Test whether LastName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.NameType.ShouldSerializeNameSuffix">
            <summary>
            Test whether NameSuffix should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.NameType.ShouldSerializeTitle">
            <summary>
            Test whether Title should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.TargetItemIDType.targetItemText">
            <summary>
            Displayed text on the targetted item.
            </summary>
        </member>
        <member name="M:SDC.Schema.TargetItemIDType.ShouldSerializetargetItemText">
            <summary>
            Test whether targetItemText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TargetItemIDType.ShouldSerializetargetProperty">
            <summary>
            Test whether targetProperty should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.TargetItemNameType.targetItemText">
            <summary>
            Displayed text on the targetted item.
            </summary>
        </member>
        <member name="M:SDC.Schema.TargetItemNameType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TargetItemNameType.ShouldSerializetargetItemText">
            <summary>
            Test whether targetItemText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TargetItemNameType.ShouldSerializetargetProperty">
            <summary>
            Test whether targetProperty should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.TargetItemXPathType.targetItemText">
            <summary>
            Displayed text on the targetted item.
            </summary>
        </member>
        <member name="M:SDC.Schema.TargetItemXPathType.ShouldSerializetargetItemText">
            <summary>
            Test whether targetItemText should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ListItemParameterType">
            <summary>
            Parameters are named, uniquely identifiable, instances of form attributes (e.g., @selected).  They are fed into expressions, which are then used as part of a rule within the form.  Parameters can also be fed into URI expressions used inside a Lookup Endpoint, i.e., URIs that call web services to supply list items (e.g., a list of SNOMED-coded items) to a question.
            
            Parameters using this construct are derived from other locations in the XML instance document, including user-entered Response values.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemParameterType.paramName">
            <summary>
            A locally useful name that describes the parameter
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemParameterType.sourceQuestionName">
            <summary>
            The @name of a Question in the current form.
            </summary>
        </member>
        <member name="P:SDC.Schema.ListItemParameterType.listItemAttribute">
            <summary>
            The name of any XML attribute on a ListItem.  The property value is the parameter's value.  If the Question is multi-select, a list of attribute values is returned.
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemParameterType.ShouldSerializedataType">
            <summary>
            Test whether dataType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemParameterType.ShouldSerializeparamName">
            <summary>
            Test whether paramName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemParameterType.ShouldSerializesourceQuestionName">
            <summary>
            Test whether sourceQuestionName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ListItemParameterType.ShouldSerializelistItemAttribute">
            <summary>
            Test whether listItemAttribute should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ParameterItemType">
            <summary>
            Parameters are named, uniquely identifiable, instances of form attributes (e.g., @selected).  They are fed into expressions, which are then used as part of a rule within the form.  Parameters can also be fed into URI expressions used inside a Lookup Endpoint, i.e., URIs that call web services to supply list items (e.g., a list of SNOMED-coded items) to a question.
            
            Parameters using this construct are derived from other locations in the XML instance document, including user-entered Response values.
            </summary>
        </member>
        <member name="P:SDC.Schema.ParameterItemType.paramName">
            <summary>
            A locally useful name that describes the parameter
            </summary>
        </member>
        <member name="P:SDC.Schema.ParameterItemType.sourceItemName">
            <summary>
            The @name of an item in the current form that holds the @itemAttribute value that will become the parameter value.
            </summary>
        </member>
        <member name="P:SDC.Schema.ParameterItemType.sourceItemAttribute">
            <summary>
            The name of any XML attribute on a named element.  The property value is the parameter's value.
            </summary>
        </member>
        <member name="M:SDC.Schema.ParameterItemType.ShouldSerializedataType">
            <summary>
            Test whether dataType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ParameterItemType.ShouldSerializeparamName">
            <summary>
            Test whether paramName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ParameterItemType.ShouldSerializesourceItemName">
            <summary>
            Test whether sourceItemName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ParameterItemType.ShouldSerializesourceItemAttribute">
            <summary>
            Test whether sourceItemAttribute should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PredAlternativesType">
            <summary>
            This Rule tests if one (or more) items in a list of items has received
            a a valid user response (answer). In the simplest case, this Rule allows a user to
            answer only one of several alternative questions (named in the @itemNames list), and
            still save a successfully-validated form. In more complex cases, a user can be
            required to produce a valid response to a specific minimum and maximum number of
            Questions, Sections, ListItems or Injected parts. The minCard value on each of the
            alternative items should be set to "0" (i.e., optional) to avoid validation
            conflicts when minCard greater than 0. The list of Item @name values is contained in
            @itemNames. The list must contain at least 2 @name values. The minimum number of
            items to answer is contained in @minAnswered (default value = 1). If there is a
            maximum number of items to answer, the value is contained in @maxAnswered (default
            value = 0 meaning unlimited).
            </summary>
        </member>
        <member name="P:SDC.Schema.PredAlternativesType.maxAnswered">
            <summary>
            @maxAnswered must be 0 or greater than or equal to
            @minAnswered.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredAlternativesType.itemNames">
            <summary>
            List of names of Sections, Questions, ListItems and/or
            InjectedItems. Each of the named items will evaluate to true or false,
            based on the following validation rules: If the name points to a
            Section, then the Section evaluates to true (valid) if all of its
            descendant items are answered correctly, according to their metadata. If
            the name points to a Question then the Question evaluates to true
            (valid) if it is correctly answered according to its metadata, and also,
            all descendant items are answered correctly, according to their
            metadata. If the name points to a ListItem then the ListItem evaluates
            to true (valid) if it is selected, and also, all descendant items are
            answered correctly according to their metadata. If the name points to an
            InjectedItem then the InjectedItem evaluates to true (valid) if all
            descendant items are answered correctly, according to their metadata.
            The number of true responses are added together. If they satisfy the
            minAnswered and maxAnswered attribute values, then this type returns
            true. Otherwise it returns false.
            </summary>
        </member>
        <member name="M:SDC.Schema.PredAlternativesType.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredAlternativesType.ShouldSerializeminAnswered">
            <summary>
            Test whether minAnswered should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredAlternativesType.ShouldSerializemaxAnswered">
            <summary>
            Test whether maxAnswered should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredAlternativesType.ShouldSerializeitemNames">
            <summary>
            Test whether itemNames should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PredEvalAttribValuesType">
            <summary>
            This Rule evaluates an arbitrary set of attribute values from any item
            and returns a Boolean summary value. In the PropertyValues condition, the contained
            Boolean attributed values are ANDed together (by default) to return a derived
            Boolean value. Default values are used if the attribute is not explicitly set to a
            value. For attributes without default values, omitted (null) values are ignored and
            are not used for null propagation.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.itemNames">
            <summary>
            Required. This attribute holds the @name attributes of the
            item(s) (Section, Question, List Item) to interrogate. These named items
            will be searched for attribute values specified in this Type. If a named
            item does not have a particualr attribute, then the attribute condition
            is ignored for that named item. It does not generate an error or a null
            propagation response.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.isActive">
            <summary>
            If visible and enabled are both true, then isActive is
            true. Otherwise, it is false.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.hasSelectionsGTE">
            <summary>
            Applies only to Questions that have selection lists
            (ListItems or LookupField). Evaluates to true if the number of selected
            items equals or exceeds the entered value.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.hasSelectionsLTE">
            <summary>
            Applies only to Questions that have selection lists
            (ListItems or LookupField). Evaluates to true if the number of selected
            items is less than or equal to the entered value.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.hasSelectionsExact">
            <summary>
            Applies only to Questions that have selection lists
            (ListItems or LookupField). Evaluates to true if the number of selected
            items equals the entered value.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.hasResponse">
            <summary>
            Applies only to items that have Response Fields (Questions
            and ListItems). If the ListItem or Question has a Response Field, and
            that field has a value in it, this property returns true. If it does not
            have a value, it returns false. If no Response Field is present, it
            retuns null and is not used for Boolean comparisons.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.isRequired">
            <summary>
            If the minCard value is greater than 0, then isRequired =
            "true" If the minCard = "0" then isRequired = "false"
            </summary>
        </member>
        <member name="P:SDC.Schema.PredEvalAttribValuesType.hasValueEQ">
            <summary>
            If the value is peceded by a colon (:) sign, then it is a
            reference to the @val attribute of another element. References can refer
            to any element with an @val attribute or @propVal on a Property. The
            datatype must be cast to the appropriate target
            datatype.
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeisSelected">
            <summary>
            Test whether isSelected should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeisActive">
            <summary>
            Test whether isActive should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasResponse">
            <summary>
            Test whether hasResponse should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeisVisible">
            <summary>
            Test whether isVisible should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeisEnabled">
            <summary>
            Test whether isEnabled should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeisRequired">
            <summary>
            Test whether isRequired should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeisReadOnly">
            <summary>
            Test whether isReadOnly should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasValue">
            <summary>
            Test whether hasValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeboolOp">
            <summary>
            Test whether boolOp should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializeitemNames">
            <summary>
            Test whether itemNames should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasSelectionsGTE">
            <summary>
            Test whether hasSelectionsGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasSelectionsLTE">
            <summary>
            Test whether hasSelectionsLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasSelectionsExact">
            <summary>
            Test whether hasSelectionsExact should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasType">
            <summary>
            Test whether hasType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasStyleClass">
            <summary>
            Test whether hasStyleClass should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializesupportDatesAndIntervals">
            <summary>
            Test whether supportDatesAndIntervals should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasPattern">
            <summary>
            Test whether hasPattern should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasValueEQ">
            <summary>
            Test whether hasValueEQ should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasValueLT">
            <summary>
            Test whether hasValueLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasValueLTE">
            <summary>
            Test whether hasValueLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasValueGT">
            <summary>
            Test whether hasValueGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasValueGTE">
            <summary>
            Test whether hasValueGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasAssociatedValueEQ">
            <summary>
            Test whether hasAssociatedValueEQ should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasAssociatedValueLT">
            <summary>
            Test whether hasAssociatedValueLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasAssociatedValueLTE">
            <summary>
            Test whether hasAssociatedValueLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasAssociatedValueGT">
            <summary>
            Test whether hasAssociatedValueGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredEvalAttribValuesType.ShouldSerializehasAssociatedValueGTE">
            <summary>
            Test whether hasAssociatedValueGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredGuardTypeSelectionSets.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PredSingleSelectionSetsType">
            <summary>
            This Rule tests combinations of co-selected ListItems (answers). If
            more than X items in the @listItemNames list are selected, then the result returns
            the value of true. Otherwise it is false. X is specified in @maxSelections, and the
            default is 1. The most common use is to detect ListItem combinations that may not be
            selected together. In most cases, all ListItems should be children of one
            multi-select question. Delete this: Legal ("allowed") selections evaluate to false
            Illegal selections evaluate to true These values can be reversed if @not is set to
            true Renamed from: IllegalSelectionSets
            </summary>
        </member>
        <member name="P:SDC.Schema.PredSingleSelectionSetsType.listItemNames">
            <summary>
            Set of @name references for a set ListItems, delimited by
            spaces.
            </summary>
        </member>
        <member name="P:SDC.Schema.PredSingleSelectionSetsType.maxSelections">
            <summary>
            The maximum number of ListItems in @listItemNames that may
            be selected at one time.
            </summary>
        </member>
        <member name="M:SDC.Schema.PredSingleSelectionSetsType.ShouldSerializemaxSelections">
            <summary>
            Test whether maxSelections should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredSingleSelectionSetsType.ShouldSerializelistItemNames">
            <summary>
            Test whether listItemNames should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RuleAutoActivateType">
            <summary>
            This Rule sets the activation status of Items based on the selection
            status of other ListItems. This declarative rule determines (guards) when target
            Items should be activated or deactivated. The rule may optionally
            activate/deactivate multiple target items with a single rule. The target item(s) to
            activate/deactivate are listed in targetNameList. In the simplest case, this rule
            operates as follows: A list of ListItems is provided (selectedItemWatchList). If all
            the items in the list are selected (or unselected - see below) as specified in the
            selectedItemWatchList list, then the guard evaluates to true, and the targetNameList
            items are activated/deactivated. In some cases, we may wish to watch unselected
            items in the selectedItemWatchList. This is indicated by prefixing the name of the
            watched item with a minus sign/dash ("-"). In some cases, we may wish to deactivate
            items in the targetNameSelectList list when the selectedItemWatchList evaluated to
            true. In this case, the target item is prefixed with a dash ("-").
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleAutoActivateType.targetNameActivationList">
            <summary>
            This list contains the @names of Identified Items that
            will be automatically activated or deactivated when the @selectedItemSet
            evaluates to true. If a @name is prefixed with a hyphen (-), then the
            item will be deactivated when @selectedItemSet evaluates to true. If
            @not = true, then the Boolean rule evaluation is negated, and thus the
            rule works in reverse. If @onlyIf is true, then the above rule is
            reversed when @selectedItemSet evaluates to false. In other words, named
            items will be deactivated, and hyphen-prefixed items will be activated
            when @selectedItemSet is false.
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleAutoActivateType.setVisibility">
            <summary>
            Make target items visible when activated and vice versa.
            Default = false. All descendants are affected in the same
            way.
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleAutoActivateType.setEnabled">
            <summary>
            Make target items enabled when activated and vice versa.
            Default = true. All descendants are affected in the same
            way.
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleAutoActivateType.setExpanded">
            <summary>
            Expand target items when activated and collapse item when
            deactivated. Default = false. All descendants are affected in the same
            way.
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleAutoActivateType.X_removeResponsesWhenDeactivated">
            <summary>
            Delete all user selections, responses and comments when
            the item is deactivated. Applies to all descendant items as well. User
            should be warned before deleting anything, with an option to preserve
            the responses in the disabled items. Disabled item responses should not
            be saved with the form data.
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoActivateType.ShouldSerializeonlyIf">
            <summary>
            Test whether onlyIf should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoActivateType.ShouldSerializeX_removeResponsesWhenDeactivated">
            <summary>
            Test whether X_removeResponsesWhenDeactivated should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoActivateType.ShouldSerializesetVisibility">
            <summary>
            Test whether setVisibility should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoActivateType.ShouldSerializesetEnabled">
            <summary>
            Test whether setEnabled should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoActivateType.ShouldSerializesetExpanded">
            <summary>
            Test whether setExpanded should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoActivateType.ShouldSerializeselectedItemSet">
            <summary>
            Test whether selectedItemSet should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoActivateType.ShouldSerializetargetNameActivationList">
            <summary>
            Test whether targetNameActivationList should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RuleAutoSelectType">
            <summary>
            This Rule selects/unselects ListItems based on the selected status of
            other ListItems. This declarative rule determines (guards) when target ListItems
            should be selected or unselected. The guard rule may optionally select/unselect
            multiple target ListItems with a single rule. The target ListItem(s) to
            select/unselect are listed in targetNameSelectList. In the simplest case, this rule
            operates as follows: A list of ListItems is provided (selectedItemWatchList). If all
            the items in the list are selected (or unselected - see below) as specified in the
            selectedItemWatchList list, then the guard evaluates to true, and the
            targetNameSelectList items are selected. In some cases, we may wish to watch
            unselected items in the selectedItemWatchList. This is indicated by prefixing the
            name of the watched item with a minus sign/dash ("-"). In some cases, we may wish to
            unselect items in the targetNameSelectList list when the selectedItemWatchList
            evaluated to true. In this case, the target item is prefixed with a dash ("-").
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleAutoSelectType.targetNameSelectList">
            <summary>
            This list contains the @names of ListItems that will be
            automatically selected or deselected when the @selectedItemSet evaluates
            to true. If a @name is prefixed with a hyphen (-), then the item will be
            deselected when @selectedItemSet evaluates to true. If @not = true, then
            the Boolean rule evaluation is negated, and thus the rule works in
            reverse. If @onlyIf is true, then the above rule is reversed when
            @selectedItemSet evaluates to false. In other words, named items will be
            deselected, and hyphen-prefixed items will be selected when
            @selectedItemSet is false.
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoSelectType.ShouldSerializeonlyIf">
            <summary>
            Test whether onlyIf should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoSelectType.ShouldSerializeselectedItemSet">
            <summary>
            Test whether selectedItemSet should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleAutoSelectType.ShouldSerializetargetNameSelectList">
            <summary>
            Test whether targetNameSelectList should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleListItemMatchTargetsType.MatchListItems">
            <summary>
            Takes the @name of one or more target ListItem elements.
            If the source value matches the match supplied attribute criteria, then
            the ListItem(s) should be selcted. The named Question and target
            ListItem must be activated (visible and enabled) in order for it to be
            selected. Read-only ListItems can be selected in the same manner.
            Multiple ListItem names may be specified, separated by
            spaces.
            </summary>
        </member>
        <member name="P:SDC.Schema.RuleListItemMatchTargetsType.MatchQuestions">
            <summary>
            Takes the @name of a Question element with ListItems. If
            the source value matches the @associatedValue (or other
            @attributeToMatch) of one or more ListItems, then the ListItem(s) should
            be selcted. The named Question and target ListItem must be activated
            (visible and enabled) in order for it to be selected. Read-only
            Questions/ListItems can be selected in the same manner. Multiple Queston
            names may be specified, separated by spaces.
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleListItemMatchTargetsType.ShouldSerializeattributeToMatch">
            <summary>
            Test whether attributeToMatch should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleListItemMatchTargetsType.ShouldSerializeMatchListItems">
            <summary>
            Test whether MatchListItems should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleListItemMatchTargetsType.ShouldSerializeMatchQuestions">
            <summary>
            Test whether MatchQuestions should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SelectionSetsActionType.ShouldSerializeElse">
            <summary>
            Test whether Else should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SelectionSetsActionType.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SelectionSetsActionType.ShouldSerializeActions">
            <summary>
            Test whether Actions should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ValidationTypeSelectionSets.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ValidationTypeSelectionTest.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PredSelectionTestType">
            <summary>
            This Rule specifies a set of ListItems that cannot be selected
            (@listItemNames) when a test ListItem (@testItemName) is selected. If any selection
            occurs in @listItemNames when @testItemName is selected, the rule evaluate to true.
            In all other cases, the rule evaluates to false. Multiple selections in
            @listItemNames are acceptable as long as @testItemName is unselected, and in this
            case, the rule evaluates to false. "Legal" (allowed) selections evaluate to false
            "Illegal" selections evaluate to true Renamed from:
            IllegalSelectionTest
            </summary>
        </member>
        <member name="P:SDC.Schema.PredSelectionTestType.testItemName">
            <summary>
            The ListItem that is being evaluated for the presence of
            disallowed selections (in @listItemNames). This attributes contains the
            @name of one ListItem.
            </summary>
        </member>
        <member name="M:SDC.Schema.PredSelectionTestType.ShouldSerializetestItemName">
            <summary>
            Test whether testItemName should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.CallFuncType">
            <summary>
            Function or web service that returns a string value.
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncType.ShouldSerializedataType">
            <summary>
            Test whether dataType should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.CallFuncBaseType">
            <summary>
            Function or web service that returns a string value.
            </summary>
        </member>
        <member name="P:SDC.Schema.CallFuncBaseType.Item">
            <summary>
            May hold 1 element:
               FunctionURI (anyURI_Stype)
               LocalFunctionName (anyURI_Stype)
            </summary>
        </member>
        <member name="P:SDC.Schema.CallFuncBaseType.Security">
            <summary>
            Information about securly accessing the web service.  More detailed service patterns may be required.
            </summary>
        </member>
        <member name="P:SDC.Schema.CallFuncBaseType.Items">
            <summary>
            May hold elements ParameterRef (ParameterItemType), ListItemParameterRef (ListItemParameterType), or ParameterValue (ParameterValueType)
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializereturnList">
            <summary>
            Test whether returnList should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializeallowNull">
            <summary>
            Test whether allowNull should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializeItemElementName">
            <summary>
            Test whether ItemElementName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializeSecurity">
            <summary>
            Test whether Security should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializelistDelimiter">
            <summary>
            Test whether listDelimiter should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializeobjectTypeName">
            <summary>
            Test whether objectTypeName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializeobjectFormat">
            <summary>
            Test whether objectFormat should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBaseType.ShouldSerializereturnVal">
            <summary>
            Test whether returnVal should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.CallFuncBoolType">
            <summary>
            Function or web service that returns a string value.
            </summary>
        </member>
        <member name="P:SDC.Schema.CallFuncBoolType.not">
            <summary>
            If @not="true" then the logical value of the conditions of the parent element is negated; true becomes false and false becomes true.
            </summary>
        </member>
        <member name="P:SDC.Schema.CallFuncBoolType.validationMessage">
            <summary>
            Optional message that appears when the rule evaluates to true
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBoolType.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncBoolType.ShouldSerializevalidationMessage">
            <summary>
            Test whether validationMessage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.MultiSelectionsActionType.ShouldSerializeElse">
            <summary>
            Test whether Else should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.MultiSelectionsActionType.ShouldSerializeActions">
            <summary>
            Test whether Actions should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SelectionTestActionType.ShouldSerializeElse">
            <summary>
            Test whether Else should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SelectionTestActionType.ShouldSerializeActions">
            <summary>
            Test whether Actions should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PredMultiSelectionSetBoolType">
            <summary>
            This Rule component evaluates the @selected status of any set of
            ListItems at runtime, and returns a true or false value based on the @selected
            status of each ListItem.
            </summary>
        </member>
        <member name="M:SDC.Schema.PredMultiSelectionSetBoolType.ShouldSerializeselectedItemSet">
            <summary>
            Test whether selectedItemSet should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.ActionsType.Items">
            <summary>
            Can hold one or more of the following:
               Action (ActActionType)
               AddCode (ActAddCodeType)
               CallFunction (CallFuncActionType)
               ConditionalGroupAction (PredActionType)
               Inject (ActInjectType)
               PreviewReport (ActPreviewReportType)
               RunCode (ScriptCodeAnyType)
               Save (ActSaveResponsesType)
               SelectMatchingListItems (RuleSelectMatchingListItemsType)
               SendMessage111 (ActSendMessageType)
               SendReport (ActSendReportType)
               SetAttributeValue (ActSetAttributeType)
               SetAttributeValueScript (ActSetAttrValueScriptType)
               SetBoolAttributeValueCode (ActSetBoolAttributeValueCodeType)
               ShowForm (ActShowFormType)
               ShowMessage (ActShowMessageType)
               ShowReport (ActShowReportType)
               ShowURL (CallFuncActionType)
               ValidateForm (ActValidateFormType) 
            </summary>
        </member>
        <member name="T:SDC.Schema.ActActionType">
            <summary>
            Add a custom action, not defined in the basic SDC
            Schemas.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActActionType.Items">
            <summary>
            May hold one or more of the following:
            ListItemParameterRef (ListItemParameterType),
            ParameterRef (ParameterItemType),
            ParameterValue (ParameterValueType),
            </summary>
        </member>
        <member name="M:SDC.Schema.ActActionType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActActionType.ShouldSerializeaction">
            <summary>
            Test whether action should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleSelectMatchingListItemsType.ShouldSerializeMatchSource">
            <summary>
            Test whether MatchSource should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RuleSelectMatchingListItemsType.ShouldSerializeListItemMatchTargets">
            <summary>
            Test whether ListItemMatchTargets should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActAddCodeType">
            <summary>
            Add all or part of a coding section to the designated target
            site.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActAddCodeType.ShouldSerializeCode">
            <summary>
            Test whether Code should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActInjectType">
            <summary>
            Inject a form or part of a form at the specified location. The
            injected section may come from the current form.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActInjectType.targetNames">
            <summary>
            The names of the parent items that will have the form (or
            form section) injected as child node(s).
            </summary>
        </member>
        <member name="M:SDC.Schema.ActInjectType.ShouldSerializetargetNames">
            <summary>
            Test whether targetNames should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActSaveResponsesType">
            <summary>
            Save the form's responses to the default persistance layer(s). The
            default format is SDCSubmitForm, but other formats may be defined and
            used.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSaveResponsesType.ShouldSerializeMessageText">
            <summary>
            Test whether MessageText should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActSendReportType">
            <summary>
            Send a report to an endpoint, via email, fax or web service. The
            default report will be transmittted in SDCSubmitForm format, but may adopt a custom
            report type
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSendReportType.Items">
            <summary>
            May hold one or more of:
            Email (EmailAddressType),
            Fax (PhoneNumberType),
            WebService (CallFuncActionType),
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSendReportType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSendReportType.ShouldSerializereportID">
            <summary>
            Test whether reportID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSendReportType.ShouldSerializereportInstanceGuid">
            <summary>
            Test whether reportInstanceGuid should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSendReportType.ShouldSerializereportInstanceVersonGuid">
            <summary>
            Test whether reportInstanceVersonGuid should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActSendMessageType">
            <summary>
            Send a message to any endpoint. Messages may include alerts of various
            types. The default datatype for messages is string.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSendMessageType.Email_Phone_WebSvc_List">
            <summary>
            List&lt;BaseType> accepts: EmailAddressType, PhoneNumberType, WebServiceType
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSendMessageType.Items">
            <summary>
            May hold one or more of:
                Email (EmailAddressType)
                Fax (PhoneNumberType)
                WebService (CallFuncActionType)
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSendMessageType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSendMessageType.ShouldSerializemessageType">
            <summary>
            Test whether messageType should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActSetAttributeType">
            <summary>
            This type is used to act upon the value of common item attributes. If
            an "act" attribute (a type with the "act" prefix) has no value assigned, it is
            ignored. If it has a value, then that attribute on the target item(s) assume(s) that
            stated value when an attached Boolean condition evaluates to true. The attached
            condition may be an "If" statement or any expression that evaluates to a Boolean
            value.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.targetNames">
            <summary>
            The names of the items affected by property
            actions
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actMinCard">
            <summary>
            Controls requirement to answer the question and the
            minimum number of repeats.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actMaxCard">
            <summary>
            Controls requirement to answer the
            question
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actActivate">
            <summary>
            Toggle visible and enabled together. Setting this to false
            will de-activate all descendents but will not change their enabled or
            visible properties.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actSelect">
            <summary>
            Toggle selection of a List Item; not applicable to other
            items.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actDeleteResponse">
            <summary>
            Delete any response in a Response field on a question or
            ListItem. Not applicable to other item types.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actReadOnly">
            <summary>
            Delete any response in a Response field on a question or
            ListItem. Not applicable to other item types.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actType">
            <summary>
            Set the @type attribute value
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actStyleClass">
            <summary>
            Set the @styleClass attribute value
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actSetTitleText">
            <summary>
            Set the @title text on an item.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actSetBase64HTML">
            <summary>
            Set HTML as base-64-encoded binary
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actSetVal">
            <summary>
            Set a @val attribute with a supplied value. The correct
            data type must be used if applicable.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actSetAssociatedValue">
            <summary>
            Set @associatedValue attribute of a ListItem with a
            supplied value. The correct data type must be used if
            applicable.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actSetValFromRef">
            <summary>
            Set a @val attribute. The correct data type must be used
            if applicable. Supply the @name of an element that has a non-null @val
            value of the correct datatype. Null values are
            ignored.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetAttributeType.actSetAssociatedValueFromRef">
            <summary>
            Set @associatedValue attribute of a ListItem. The correct
            data type must be used if applicable. Supply the @name of an element
            that has a non-null @val value of the correct datatype. Null values are
            ignored.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactVisible">
            <summary>
            Test whether actVisible should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactEnable">
            <summary>
            Test whether actEnable should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactActivate">
            <summary>
            Test whether actActivate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSelect">
            <summary>
            Test whether actSelect should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactDeleteResponse">
            <summary>
            Test whether actDeleteResponse should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactReadOnly">
            <summary>
            Test whether actReadOnly should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializetargetNames">
            <summary>
            Test whether targetNames should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactMinCard">
            <summary>
            Test whether actMinCard should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactMaxCard">
            <summary>
            Test whether actMaxCard should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactType">
            <summary>
            Test whether actType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactStyleClass">
            <summary>
            Test whether actStyleClass should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSetTitleText">
            <summary>
            Test whether actSetTitleText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSetCode">
            <summary>
            Test whether actSetCode should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSetCodeSystem">
            <summary>
            Test whether actSetCodeSystem should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSetVal">
            <summary>
            Test whether actSetVal should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSetAssociatedValue">
            <summary>
            Test whether actSetAssociatedValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSetValFromRef">
            <summary>
            Test whether actSetValFromRef should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttributeType.ShouldSerializeactSetAssociatedValueFromRef">
            <summary>
            Test whether actSetAssociatedValueFromRef should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActSetAttrValueScriptType">
            <summary>
            This type is used to act upon the value of common item properties. If
            an "act" property (a property with the "act" prefix) has no value assigned, it is
            ignored. If it has a value, then that property on the target item(s) assume(s) that
            stated value when an attached Boolean condition evaluates to true. The attached
            condition may be an "If" statement or any expression that evaluates to a Boolean
            value.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetAttrValueScriptType.ShouldSerializeTarget">
            <summary>
            Test whether Target should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActSetBoolAttributeValueCodeType">
            <summary>
            Sets the value of any named attribute. However, it is primarily
            designed for Response element(s) on a Question or ListItem. The value may be
            determined by a literal value with a defined data type, the value at another named
            Response item, an expression written in a specified scripting or programming
            language, or the value of a named code listed in the same
            template.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetBoolAttributeValueCodeType.elementName">
            <summary>
            The @name attribute of the referenced
            element.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActSetBoolAttributeValueCodeType.attributeName">
            <summary>
            The name of any attribute on a named
            element.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetBoolAttributeValueCodeType.ShouldSerializeelementName">
            <summary>
            Test whether elementName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetBoolAttributeValueCodeType.ShouldSerializeattributeName">
            <summary>
            Test whether attributeName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActSetBoolAttributeValueCodeType.ShouldSerializeX_targetNames">
            <summary>
            Test whether X_targetNames should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ScriptCodeBoolType">
            <summary>
            Programming code or pseudocode that describes a calculation.  The code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
            </summary>
        </member>
        <member name="P:SDC.Schema.ScriptCodeBoolType.not">
            <summary>
            If @not="true" then the logical value of the conditions of the parent element is negated; true becomes false and false becomes true.
            </summary>
        </member>
        <member name="P:SDC.Schema.ScriptCodeBoolType.validationMessage">
            <summary>
            Optional message that appears when the rule evaluates to true
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBoolType.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBoolType.ShouldSerializevalidationMessage">
            <summary>
            Test whether validationMessage should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActShowFormType">
            <summary>
            Show an external form to interact with the user.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActShowFormType.formID">
            <summary>
            This ID represents the form to be
            displayed.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActShowFormType.packageID">
            <summary>
            This ID represents the Package that contains the form to
            be displayed.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowFormType.ShouldSerializeformID">
            <summary>
            Test whether formID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowFormType.ShouldSerializepackageID">
            <summary>
            Test whether packageID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowFormType.ShouldSerializedisplayState">
            <summary>
            Test whether displayState should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActShowMessageType">
            <summary>
            Display a message to the form user, triggered by activity within the
            form.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowMessageType.ShouldSerializeMessage">
            <summary>
            Test whether Message should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowMessageType.ShouldSerializealertLevel">
            <summary>
            Test whether alertLevel should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowMessageType.ShouldSerializealertType">
            <summary>
            Test whether alertType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowMessageType.ShouldSerializemessageType">
            <summary>
            Test whether messageType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowMessageType.ShouldSerializemessageCode">
            <summary>
            Test whether messageCode should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActShowReportType">
            <summary>
            Show a stored report. The following parameters may be used: reportID:
            indicator of a report definition in SDC format. packageID: retrieve report as a
            package with ancillary information. reportInstanceGUID: retreive 1 or more report
            versions by using a report instance GUID. This may be used in conjunctions with a
            packageID. reportInstanceVersionGUID: retrieve a single version of a report
            representing the state of a report when it was saved. This may be used in
            conjunctions with a packageID.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActShowReportType.reportID">
            <summary>
            This ID represents the report to be
            displayed.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActShowReportType.packageID">
            <summary>
            This ID represents the Package that contains the report to
            be displayed.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowReportType.ShouldSerializereportID">
            <summary>
            Test whether reportID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowReportType.ShouldSerializepackageID">
            <summary>
            Test whether packageID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowReportType.ShouldSerializereportInstanceGuid">
            <summary>
            Test whether reportInstanceGuid should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowReportType.ShouldSerializereportInstanceVersonGuid">
            <summary>
            Test whether reportInstanceVersonGuid should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActShowReportType.ShouldSerializedisplayState">
            <summary>
            Test whether displayState should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActPreviewReportType">
            <summary>
            Show a report preview, based on data in the current form. The
            following parameter may be used: reportID: points to a report definition in SDC
            format.
            </summary>
        </member>
        <member name="P:SDC.Schema.ActPreviewReportType.reportID">
            <summary>
            This ID represents the report to be
            displayed.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActPreviewReportType.ShouldSerializereportID">
            <summary>
            Test whether reportID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActPreviewReportType.ShouldSerializedisplayState">
            <summary>
            Test whether displayState should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ActValidateFormType">
            <summary>
            Test the data in the form for proper data types, rule integrity, and
            completeness of required questions.
            </summary>
        </member>
        <member name="M:SDC.Schema.ActValidateFormType.ShouldSerializevalidateDataTypes">
            <summary>
            Test whether validateDataTypes should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActValidateFormType.ShouldSerializevalidateRules">
            <summary>
            Test whether validateRules should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActValidateFormType.ShouldSerializevalidateCompleteness">
            <summary>
            Test whether validateCompleteness should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActValidateFormType.ShouldSerializeValidationWebService">
            <summary>
            Test whether ValidationWebService should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ActValidateFormType.ShouldSerializevalidationType">
            <summary>
            Test whether validationType should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ScriptCodeAnyType">
            <summary>
            Programming code or pseudocode that describes a calculation.  THe code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeAnyType.ShouldSerializedataType">
            <summary>
            Test whether dataType should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ScriptCodeBaseType">
            <summary>
            Programming code or pseudocode that describes a calculation.  THe code returns a value of the data type required by the parent Response field.  To assist with enabling the code in the form, the referenced form items and properties should be referenced by @name under the parameters elemeent.  It is possible to add mulitple calculation expressions to produce equivalent results using different programming languages and URIs.  The @ type attribute may be used to distinguish between them.  An Extension may be used instead of or along with an Expression and Parameters list.  Expressions may populate Responses that are set to @readOnly = "true" to ensure that all responses are calculated and not latered by the user.  Alternatively, the user may change a value created by (or instead of) the Expression.
            </summary>
        </member>
        <member name="P:SDC.Schema.ScriptCodeBaseType.language">
            <summary>
            Programming language.
            </summary>
        </member>
        <member name="P:SDC.Schema.ScriptCodeBaseType.code">
            <summary>
            Script contents.
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializereturnList">
            <summary>
            Test whether returnList should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializeallowNull">
            <summary>
            Test whether allowNull should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializelistDelimiter">
            <summary>
            Test whether listDelimiter should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializeobjectTypeName">
            <summary>
            Test whether objectTypeName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializeobjectFormat">
            <summary>
            Test whether objectFormat should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializereturnVal">
            <summary>
            Test whether returnVal should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializelanguage">
            <summary>
            Test whether language should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ScriptCodeBaseType.ShouldSerializecode">
            <summary>
            Test whether code should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.CallFuncActionType">
            <summary>
            Function or web service that returns a string
            value.
            </summary>
        </member>
        <member name="P:SDC.Schema.CallFuncActionType.ConditionalActions">
            <summary>
            Actions to take, usually based on the return @val
            value of the function. Condiitons may be specified for each action.
            Conditions may be combined by Boolean operators and nested to any
            level.
            </summary>
        </member>
        <member name="M:SDC.Schema.CallFuncActionType.ShouldSerializeConditionalActions">
            <summary>
            Test whether ConditionalActions should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.CallFuncBoolActionType">
            <summary>
            Function or web service that returns a string
            value.
            </summary>
        </member>
        <member name="P:SDC.Schema.CallFuncBoolActionType.Items1">
            <summary>
            May contain one or more of:
            ConditionalActions (PredActionType),
            Actions (ActionsType),
            Else (PredActionType) ,
            </summary>
        </member>
        <member name="T:SDC.Schema.OnEventType">
            <summary>
            Add a custom event handler to a form item such as a question, section
            or list item.
            </summary>
        </member>
        <member name="M:SDC.Schema.OnEventType.ShouldSerializeeventName">
            <summary>
            Test whether eventName should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RulesType">
            <summary>
            Rules are procedures that affect form behaviour. They are usually
            triggered by changes to the form by a form user. They may also be triggered by other
            rules or changes to form metadata (e.g., change to @visible). SDC decarative form
            rules consist of several types: Assertions are "predicate" expressions that evaulate
            to true or false, based upon the state of answers/responses or metadata within a
            form. An asserion is equivalent to the "If" part of an If-Then block. The
            implementation framework must assign a fucntion to handle any assertion that
            evaluates to False. Assertions are no handled by the form itself. If-Then-Else
            blocks run a "Then" action if the "If block evaluated to true, and an "Else" block
            if the "If" block evaluates to false. An AutoSelection rule automatically selects an
            answer choice (ListItem) when another answer (or set of answers) is selected or
            unselected. IllegalSelectionTest evaluates to true if a disallowed set of answer
            choices is selected at the same time. The implementation should take an action
            (alert user, cancel inout, etc) when a true result occurs. IllegalSelection Set
            restricts combinations of co-selected ListItems (answers). In other words, only zero
            or one item in this list may be selected at a time.
            </summary>
        </member>
        <member name="M:SDC.Schema.RulesType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.PredGuardType.Items">
            <summary>
            Can hold one or more of the following:
               AttributeEval (AttributeEvalActionType)
               CallBoolFunction (CallFuncBoolActionType)
               Group (PredActionType)
               ItemAlternatives (PredAlternativesType)
               MultiSelections (MultiSelectionsActionType)
               ScriptBoolFunc (ScriptBoolFuncActionType)
               SelectionSets (SelectionSetsActionType)
               SelectionTest (SelectionTestActionType)
            </summary>
        </member>
        <member name="M:SDC.Schema.PredGuardType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredGuardType.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredGuardType.ShouldSerializeboolOp">
            <summary>
            Test whether boolOp should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.PredActionType.Items">
            <summary>
            Can hold one or more of the following:
                AttributeEval (AttributeEvalActionType)
                CallBoolFunction (CallFuncBoolActionType)
                Group (PredActionType)
                MultiSelections (MultiSelectionsActionType)
                ScriptBoolFunc (ScriptBoolFuncActionType)
                SelectMatchingListItems (RuleSelectMatchingListItemsType)
                SelectionSets (SelectionSetsActionType)
                SelectionTest (SelectionTestActionType) 
            </summary>
        </member>
        <member name="M:SDC.Schema.PredActionType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredActionType.ShouldSerializeElse">
            <summary>
            Test whether Else should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredActionType.ShouldSerializenot">
            <summary>
            Test whether not should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredActionType.ShouldSerializeboolOp">
            <summary>
            Test whether boolOp should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredActionType.ShouldSerializeActions">
            <summary>
            Test whether Actions should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.FuncBoolBaseType">
            <summary>
            Function or web service that returns a Boolean value.  Items that inherit from this class must test the result for being a Boolean true/false value or null.
            </summary>
        </member>
        <member name="P:SDC.Schema.FuncBoolBaseType.allowNull">
            <summary>
            True means that null values are allowed in @returnVal.  This corresponds to an empty string in @val or a missing @returnVal attribute.
            </summary>
        </member>
        <member name="P:SDC.Schema.FuncBoolBaseType.validationMessage">
            <summary>
            Optional message that appears when the rule evaluates to true
            </summary>
        </member>
        <member name="M:SDC.Schema.FuncBoolBaseType.ShouldSerializeallowNull">
            <summary>
            Test whether allowNull should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FuncBoolBaseType.ShouldSerializereturnVal">
            <summary>
            Test whether returnVal should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FuncBoolBaseType.ShouldSerializevalidationMessage">
            <summary>
            Test whether validationMessage should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ContactType">
            <summary>
            A model structure for a Person or Organization that generally performs a particular stated role.
            </summary>
        </member>
        <member name="M:SDC.Schema.ContactType.ShouldSerializePerson">
            <summary>
            Test whether Person should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ContactType.ShouldSerializeOrganization">
            <summary>
            Test whether Organization should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.OrganizationType">
            <summary>
            A model structure for an Organization object.
            </summary>
        </member>
        <member name="P:SDC.Schema.OrganizationType.Role">
            <summary>
            Role of the organization, e.g., creator, copyright
            holder, accreditor, certifier, curator, etc.
            </summary>
        </member>
        <member name="P:SDC.Schema.OrganizationType.Usage">
            <summary>
            When this organization should be
            contacted.
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeStreetAddress">
            <summary>
            Test whether StreetAddress should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeEmail">
            <summary>
            Test whether Email should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializePhone">
            <summary>
            Test whether Phone should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeWebURL">
            <summary>
            Test whether WebURL should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeRole">
            <summary>
            Test whether Role should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeContactPerson">
            <summary>
            Test whether ContactPerson should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeIdentifier">
            <summary>
            Test whether Identifier should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeOrgName">
            <summary>
            Test whether OrgName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeDepartment">
            <summary>
            Test whether Department should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.OrganizationType.ShouldSerializeUsage">
            <summary>
            Test whether Usage should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PersonType">
            <summary>
            A model structure for a Person object.
            </summary>
        </member>
        <member name="P:SDC.Schema.PersonType.Role">
            <summary>
            Role of the person, e.g., creator, copyright holder, accreditor, certifier, curator, etc.
            </summary>
        </member>
        <member name="P:SDC.Schema.PersonType.Usage">
            <summary>
            When this person should be contacted.
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeAliasName">
            <summary>
            Test whether AliasName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeJob">
            <summary>
            Test whether Job should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeStreetAddress">
            <summary>
            Test whether StreetAddress should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeEmail">
            <summary>
            Test whether Email should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializePhone">
            <summary>
            Test whether Phone should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeWebURL">
            <summary>
            Test whether WebURL should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeIdentifier">
            <summary>
            Test whether Identifier should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializePersonName">
            <summary>
            Test whether PersonName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeRole">
            <summary>
            Test whether Role should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PersonType.ShouldSerializeUsage">
            <summary>
            Test whether Usage should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.AddressType">
            <summary>
            A structure for recording street/mailing addresses.
            </summary>
        </member>
        <member name="P:SDC.Schema.AddressType.InternalAddress">
            <summary>
            Address instructions for directing mail within an organizations buildings or corporate
            infrastructure.
            </summary>
        </member>
        <member name="P:SDC.Schema.AddressType.AddressLine">
            <summary>
            Address instructions for directing mail to a street address.
            </summary>
        </member>
        <member name="P:SDC.Schema.AddressType.Jurisdiction">
            <summary>
            Other optional locale identifier.
            </summary>
        </member>
        <member name="P:SDC.Schema.AddressType.State">
            <summary>
            State, Province, etc.
            </summary>
        </member>
        <member name="P:SDC.Schema.AddressType.PostalCode">
            <summary>
            Local postal code, e.g., zip code.
            </summary>
        </member>
        <member name="P:SDC.Schema.AddressType.Country">
            <summary>
            **Need list of official country codes or text?
            </summary>
        </member>
        <member name="P:SDC.Schema.AddressType.Usage">
            <summary>
            When this address should be used
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeInternalAddress">
            <summary>
            Test whether InternalAddress should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeAddressLine">
            <summary>
            Test whether AddressLine should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeAddressType1">
            <summary>
            Test whether AddressType1 should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeCity">
            <summary>
            Test whether City should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeJurisdiction">
            <summary>
            Test whether Jurisdiction should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeState">
            <summary>
            Test whether State should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializePostalCode">
            <summary>
            Test whether PostalCode should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeCountry">
            <summary>
            Test whether Country should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AddressType.ShouldSerializeUsage">
            <summary>
            Test whether Usage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AreaCodeType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RichTextType">
            <summary>
            Representation of plain text with an option for HTML-formatting. Contains optional boilerplate metadata to aid programmatic manipulation.
            </summary>
        </member>
        <member name="M:SDC.Schema.RichTextType.ShouldSerializeRichText">
            <summary>
            Test whether RichText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RichTextType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ComplianceRuleType">
            <summary>
            General information about how information in a particular form package must be handled. This may include, e.g., security, completeness, transmission, and validation criteria.
            </summary>
        </member>
        <member name="M:SDC.Schema.ComplianceRuleType.ShouldSerializeComplianceOrganization">
            <summary>
            Test whether ComplianceOrganization should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ComplianceRuleType.ShouldSerializeDescription">
            <summary>
            Test whether Description should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ComplianceRuleType.ShouldSerializeruleID">
            <summary>
            Test whether ruleID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ComplianceRuleType.ShouldSerializeformID">
            <summary>
            Test whether formID should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.SubmissionRuleType">
            <summary>
            information about where to submit a completed form
            </summary>
        </member>
        <member name="M:SDC.Schema.SubmissionRuleType.ShouldSerializeDestination">
            <summary>
            Test whether Destination should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SubmissionRuleType.ShouldSerializeRuleDescription">
            <summary>
            Test whether RuleDescription should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SubmissionRuleType.ShouldSerializeformID">
            <summary>
            Test whether formID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SubmissionRuleType.ShouldSerializeruleID">
            <summary>
            Test whether ruleID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.HashType.ShouldSerializehashAlgorithm">
            <summary>
            Test whether hashAlgorithm should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.IdentifierType">
            <summary>
            A code or id that identifies a person or organization or object according to a standard system such as CLIA or NPI. The system should be specified in the @system attribute.
            </summary>
        </member>
        <member name="M:SDC.Schema.IdentifierType.ShouldSerializesystem">
            <summary>
            Test whether system should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.IdentifierType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.LanguageCodeISO6393_Type">
            <summary>
            A generic structure for recording languages.
            </summary>
        </member>
        <member name="T:SDC.Schema.LanguageType">
            <summary>
            A generic structure for recording languages.
            </summary>
        </member>
        <member name="P:SDC.Schema.LanguageType.Language">
            <summary>
            The language used for text in SDC templates.
            </summary>
        </member>
        <member name="M:SDC.Schema.LanguageType.ShouldSerializeLanguage">
            <summary>
            Test whether Language should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.LanguageType.ShouldSerializeLanguageCodeISO6393">
            <summary>
            Test whether LanguageCodeISO6393 should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ProvenanceType.ShouldSerializeReplacedFile">
            <summary>
            Test whether ReplacedFile should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ReplacedIDsType.ShouldSerializeReplacedID">
            <summary>
            Test whether ReplacedID should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.VersionType">
            <summary>
            A generic structure for recording file version metadata.
            </summary>
        </member>
        <member name="P:SDC.Schema.VersionType.VersioningReference">
            <summary>
            Information about the document that describes the versioning methodology nomenclature.
            </summary>
        </member>
        <member name="P:SDC.Schema.VersionType.VersionComments">
            <summary>
            Comments about the changes in this version
            </summary>
        </member>
        <member name="P:SDC.Schema.VersionType.Changes">
            <summary>
            Itemized list of changes in the new version
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeVersioningReference">
            <summary>
            Test whether VersioningReference should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeVersionComments">
            <summary>
            Test whether VersionComments should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeChanges">
            <summary>
            Test whether Changes should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializefullVersion">
            <summary>
            Test whether fullVersion should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeversionRegExPattern">
            <summary>
            Test whether versionRegExPattern should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeversionLevel1">
            <summary>
            Test whether versionLevel1 should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeversionLevel2">
            <summary>
            Test whether versionLevel2 should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeversionLevel3">
            <summary>
            Test whether versionLevel3 should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeversionLevel4">
            <summary>
            Test whether versionLevel4 should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionType.ShouldSerializeversionLevel5">
            <summary>
            Test whether versionLevel5 should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.VersionTypeChanges">
            <summary>
            A generic structure for recording file version metadata.
            </summary>
        </member>
        <member name="M:SDC.Schema.VersionTypeChanges.ShouldSerializeChange">
            <summary>
            Test whether Change should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ContactsType.ShouldSerializeContact">
            <summary>
            Test whether Contact should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DestinationType">
            <summary>
            ***Changed from BaseType to ExtensionBaseType
            </summary>
        </member>
        <member name="M:SDC.Schema.DestinationType.ShouldSerializeSubmissionTechnology">
            <summary>
            Test whether SubmissionTechnology should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DestinationType.ShouldSerializeEndpoint">
            <summary>
            Test whether Endpoint should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DestinationType.ShouldSerializeEndpointDescription">
            <summary>
            Test whether EndpointDescription should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DestinationType.ShouldSerializeOrganization">
            <summary>
            Test whether Organization should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PhoneNumberType">
            <summary>
            ***Changed from BaseType to ExtensionBaseType
            </summary>
        </member>
        <member name="M:SDC.Schema.PhoneNumberType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PhoneType">
            <summary>
            A structure for recording telephone numbers.
            </summary>
        </member>
        <member name="P:SDC.Schema.PhoneType.Usage">
            <summary>
            When this phone number should be used
            </summary>
        </member>
        <member name="M:SDC.Schema.PhoneType.ShouldSerializePhoneType1">
            <summary>
            Test whether PhoneType1 should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PhoneType.ShouldSerializeCountryCode">
            <summary>
            Test whether CountryCode should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PhoneType.ShouldSerializeAreaCode">
            <summary>
            Test whether AreaCode should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PhoneType.ShouldSerializePhoneNumber">
            <summary>
            Test whether PhoneNumber should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PhoneType.ShouldSerializePhoneExtension">
            <summary>
            Test whether PhoneExtension should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PhoneType.ShouldSerializeUsage">
            <summary>
            Test whether Usage should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.JobType.Description">
            <summary>
            Job Description
            </summary>
        </member>
        <member name="M:SDC.Schema.JobType.ShouldSerializeJobTitle">
            <summary>
            Test whether JobTitle should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.JobType.ShouldSerializeOrganization">
            <summary>
            Test whether Organization should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.JobType.ShouldSerializeStartDate">
            <summary>
            Test whether StartDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.JobType.ShouldSerializeStopDate">
            <summary>
            Test whether StopDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.JobType.ShouldSerializeDescription">
            <summary>
            Test whether Description should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.EmailAddressType">
            <summary>
            ***Changed from BaseType to ExtensionBaseType
            </summary>
        </member>
        <member name="M:SDC.Schema.EmailAddressType.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.EmailType">
            <summary>
            A structure for recording email addresses.
            </summary>
        </member>
        <member name="P:SDC.Schema.EmailType.EmailClass">
            <summary>
            Type of email, e.g., home, office, etc
            </summary>
        </member>
        <member name="P:SDC.Schema.EmailType.Usage">
            <summary>
            When this email should be used
            </summary>
        </member>
        <member name="M:SDC.Schema.EmailType.ShouldSerializeEmailAddress">
            <summary>
            Test whether EmailAddress should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.EmailType.ShouldSerializeEmailClass">
            <summary>
            Test whether EmailClass should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.EmailType.ShouldSerializeUsage">
            <summary>
            Test whether Usage should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.ApprovalType.Description">
            <summary>
            Non-structured text describing file approval.
            </summary>
        </member>
        <member name="M:SDC.Schema.ApprovalType.ShouldSerializeApprovalContact">
            <summary>
            Test whether ApprovalContact should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ApprovalType.ShouldSerializeDescription">
            <summary>
            Test whether Description should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AssociatedFilesType.ShouldSerializeFile">
            <summary>
            Test whether File should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.FileDatesType">
            <summary>
            List of standard kinds of dates that may apply to a file or its usage.
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializePreviousRevisionDate">
            <summary>
            Test whether PreviousRevisionDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializeOtherDate">
            <summary>
            Test whether OtherDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializeFileDate">
            <summary>
            Test whether FileDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializeReleaseDate">
            <summary>
            Test whether ReleaseDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializeEffectiveDate">
            <summary>
            Test whether EffectiveDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializeFirstReleaseDate">
            <summary>
            Test whether FirstReleaseDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializeUsageStartDate">
            <summary>
            Test whether UsageStartDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileDatesType.ShouldSerializeRetirementDate">
            <summary>
            Test whether RetirementDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileHashType.ShouldSerializehashType">
            <summary>
            Test whether hashType should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.FileType">
            <summary>
            Information about a file, usually thought of as a binary byte stream
            stored on disk. A FileType can also represent a "virtual" file, such as an XML
            module in a larger XML document. Such a virtual file could theoretically be stored
            as a byte stream, as an independant file on disk or as a database record or set of
            records, even if this byte stream is never actually persisted as an independant disk
            file.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.FileID">
            <summary>
            Internal/local File ID, not necessarily in the format
            of the FileURI used for all SDC FormDesign items.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.DisplayName">
            <summary>
            Text to be displayed that encapulates the file
            contents. This may be the same as the internal Title of the
            file.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.Title">
            <summary>
            Official title of the file.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.Version">
            <summary>
            File version
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.FileName">
            <summary>
            The name of the file as saved on disk or other persistant storage.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.FileExtension">
            <summary>
            The file type extension that describes the file's
            internal format. This is usually the 3-4 character text that appears
            after the last period in the file name, e.g., txt, docx,
            etc.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.FileClass">
            <summary>
            A short description of the class of file, such as "FormDesign XML"
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.Description">
            <summary>
            Any additional information about the template or file. The type of information should be specified in the @type
            attribute.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.Usage">
            <summary>
            Guidance for when this file should be used, and when it should not be used.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.Dates">
            <summary>
            Various dates associated with the file release, versioning and usage.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.Contacts">
            <summary>
            People and Organizations associated with the file.
            Specify the type of Contact in the @type attribute. Examples of
            @type include Curator, Author, and Authority.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.Approval">
            <summary>
            Documentation of review and acceptance of the file for production usage.
            </summary>
        </member>
        <member name="P:SDC.Schema.FileType.AssociatedFiles">
            <summary>
            Link to any associated files, such as schemas, reference documents, manuals, etc.
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeDescription">
            <summary>
            Test whether Description should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeApproval">
            <summary>
            Test whether Approval should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeLanguage">
            <summary>
            Test whether Language should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeDefaultSubmissionRule">
            <summary>
            Test whether DefaultSubmissionRule should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeDefaultComplianceRule">
            <summary>
            Test whether DefaultComplianceRule should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeFileID">
            <summary>
            Test whether FileID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeFileURI">
            <summary>
            Test whether FileURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeDisplayName">
            <summary>
            Test whether DisplayName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeTitle">
            <summary>
            Test whether Title should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeVersion">
            <summary>
            Test whether Version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeFileName">
            <summary>
            Test whether FileName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeFileExtension">
            <summary>
            Test whether FileExtension should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeFileClass">
            <summary>
            Test whether FileClass should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeFileSizeKB">
            <summary>
            Test whether FileSizeKB should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeCopyright">
            <summary>
            Test whether Copyright should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeTermsofUse">
            <summary>
            Test whether TermsofUse should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeUsage">
            <summary>
            Test whether Usage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeDates">
            <summary>
            Test whether Dates should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeContacts">
            <summary>
            Test whether Contacts should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeFileHash">
            <summary>
            Test whether FileHash should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeAssociatedFiles">
            <summary>
            Test whether AssociatedFiles should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileType.ShouldSerializeProvenance">
            <summary>
            Test whether Provenance should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.FileUsageType.Included">
            <summary>
            Reasons to use the file
            </summary>
        </member>
        <member name="P:SDC.Schema.FileUsageType.Excluded">
            <summary>
            Reasons to not use the file
            </summary>
        </member>
        <member name="P:SDC.Schema.FileUsageType.Description">
            <summary>
            Non-coded text describing usage criteria.
            </summary>
        </member>
        <member name="M:SDC.Schema.FileUsageType.ShouldSerializeIncluded">
            <summary>
            Test whether Included should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileUsageType.ShouldSerializeExcluded">
            <summary>
            Test whether Excluded should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.FileUsageType.ShouldSerializeDescription">
            <summary>
            Test whether Description should be serialized
            </summary>
        </member>
        <member name="F:SDC.Schema.ObjectChangeTracker.stateField">
            <summary>
            indicate current state
            </summary>
        </member>
        <member name="P:SDC.Schema.ObjectChangeTracker.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.UpdateChangeState">
            <summary>
            Updates the state of the change.
            </summary>
        </member>
        <member name="P:SDC.Schema.ObjectChangeTracker.ObjectTrackingEnabled">
            <summary>
            Gets or sets a value indicating whether [change tracking enabled].
            </summary>
            <value>
            	<c>true</c> if [change tracking enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.StartTracking">
            <summary>
            Starts record changes.
            </summary>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.StartTracking(System.Boolean)">
            <summary>
            Starts record changes.
            </summary>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.StopTracking">
            <summary>
            Starts record changes.
            </summary>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.InitOriginalValue">
            <summary>
            Inits the original value.
            </summary>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.ResetOriginalValue">
            <summary>
            Resets the original value.
            </summary>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.TrackableCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.String)">
            <summary>
            Trackables the collection changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="!:NotifyTrackableCollectionChangedEventArgs"/> instance containing the event data.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.RecordCurrentValue(System.String,System.Object)">
            <summary>
            Captures the original value for a property that is changing.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.RecordOriginalToCollectionProperties(System.String,System.Object)">
            <summary>
            Records original items value of collection to collection valued properties on SelfTracking Entities.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.RecordAdditionToCollectionProperties(System.String,System.Object)">
            <summary>
            Records an addition to collection valued properties on SelfTracking Entities.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.RecordRemovalFromCollectionProperties(System.String,System.Object)">
            <summary>
            Records a removal to collection valued properties on SelfTracking Entities.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The object value.</param>
        </member>
        <member name="M:SDC.Schema.ObjectChangeTracker.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:SDC.Schema.SdcSerializer`1.Serialize(`0,System.Text.Encoding)">
            <summary>
            Serializes current T object into an XML string
            </summary>
            <returns>string XML value</returns>
        </member>
        <member name="M:SDC.Schema.SdcSerializer`1.Deserialize(System.String,`0@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an EntityBase object
            </summary>
            <param name="input">string workflow markup to deserialize</param>
            <param name="obj">Output T object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:SDC.Schema.SdcSerializer`1.SaveToFile(`0,System.String,System.Text.Encoding,System.Exception@)">
            <summary>
            Serializes current T object into file
            </summary>
            <param name="fileName">full path of outupt xml file</param>
            <param name="exception">output Exception value if failed</param>
            <returns>true if can serialize and save into file; otherwise, false</returns>
        </member>
        <member name="M:SDC.Schema.SdcSerializer`1.LoadFromFile(System.String,System.Text.Encoding,`0@,System.Exception@)">
            <summary>
            Deserializes xml markup from file into an EntityBase object
            </summary>
            <param name="fileName">string xml file to load and deserialize</param>
            <param name="obj">Output T object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="F:SDC.Schema.TrackableCollection`1.propertyNameField">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="E:SDC.Schema.TrackableCollection`1.TrackableCollectionChanged">
            <summary>
            Occurs when [trackable collection changed].
            </summary>
        </member>
        <member name="M:SDC.Schema.TrackableCollection`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SDC.Schema.TrackableCollection`1"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:SDC.Schema.TrackableCollection`1.TrackableCollection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the TrackableCollection control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:SDC.Schema.X_DataTypesNumeric_DEType">
            <summary>
            NEW:
            SDC datatypes for Data Entry (DE), based mostly on W3C specifications. Uses baseAttributes  and Extension capability to enhance the list of Data Types. Includes additonal metadata to specify data input restrictions for data entry forms, and to aid in validation of IHE RFD SubmitForm responses in XML instance documents.
            </summary>
        </member>
        <member name="M:SDC.Schema.X_DataTypesNumeric_DEType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.ChangedFieldType.Item">
            <summary>
            May be one of the following:
            TargetItemID (TargetItemIDType),
            TargetItemName (TargetItemNameType),
            TargetItemXPath (TargetItemXPathType),
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangedFieldType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.dt">
            <summary>
            A dummy "data type" (dt) element to compensate for a code generator bug.  Do not use this type for anything.
            </summary>
        </member>
        <member name="P:SDC.Schema.dt.quantEnum">
            <summary>
            dt class constructor
            </summary>
        </member>
        <member name="M:SDC.Schema.dt.ShouldSerializeallowGT">
            <summary>
            Test whether allowGT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dt.ShouldSerializeallowGTE">
            <summary>
            Test whether allowGTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dt.ShouldSerializeallowLT">
            <summary>
            Test whether allowLT should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dt.ShouldSerializeallowLTE">
            <summary>
            Test whether allowLTE should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dt.ShouldSerializeallowAPPROX">
            <summary>
            Test whether allowAPPROX should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.dt.ShouldSerializequantEnum">
            <summary>
            Test whether quantEnum should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AttributeEvalActionType.ShouldSerializeElse">
            <summary>
            Test whether Else should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.AttributeEvalActionType.ShouldSerializeActions">
            <summary>
            Test whether Actions should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.Admin">
            <summary>
            Admin contains information about a package, including a description of the package contents and purpose (PackageDescription), information about the registry that contains the package file (RegistryData), and information about the package file characteristics (TemplateFile).
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.pkgTitle">
            <summary>
            NEW Feb 2019
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.baseURI">
            <summary>
            @baseURI is required in the SDCPackage element but is optional elsewhere.  It identifies the organization that is responsible for designing and maintaining the Package contents.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.filename">
            <summary>
            NEW: filename to use when the current package instance is saved as a file.
            For package containing responses, the filename may include the pkgInstanceVersionURI,
            but the naming convention may be use-case-specific.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.basedOnURI">
            <summary>
            NEW: URI used to identify the package that that this package is based upon.  In most cases, this should be a standard package that is modified and/or extended by the current package.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.lineage">
            <summary>
            NEW: A text identifier that is used to group multiple versions of a single package.  The lineage is constant for all versions of a single kind of package.
            
            When appended to @baseURI, it can be used to retrieve all versions of one particular package.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.version">
            <summary>
            NEW: @version contains the version text for the current package.  It is designed to be used in conjunction with @baseURI and @lineage.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.fullURI">
            <summary>
            NEW: The full URI that uniquely identifies the current package.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.instanceID">
            <summary>
            NEW: Unique string used to identify a unique instance of a form. Used for tracking form responses across time and across multiple episodes of editing by end-users.  This string does not change for each edit session of a package instance.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.instanceVersion">
            <summary>
            NEW: Timestamp used to identify a unique instance of a package.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This field must change for each edit session of a form instance.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SDC.Schema.BasePackageType.instanceVersionURI" -->
        <member name="P:SDC.Schema.BasePackageType.instanceVersionPrev">
            <summary>
            NEW: Unique dateTime used to identify the immediate previous instance of a package.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This field must change for each edit session of a form instance.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.X_pkgPreviousInstanceVersionURI">
            <summary>
            NEW: Unique URI used to identify the immediate previous instance of a package containing responses.  This is the @pkgnstanceVersionURI that represents the instance of the package that the user opened up before beginning a new cycle of edit/save.  This attribute is used for tracking package responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit session of a package instance.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.X_prevVersionURI">
            <summary>
            NEW: The full URI used to identify the package that is the immediate previous version of the current package
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.X_pkgInstanceURI">
            <summary>
            NEW: Unique URI used to identify a unique instance of a package.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI does not change for each edit session of a package instance.
            </summary>
        </member>
        <member name="P:SDC.Schema.BasePackageType.X_pkgInstanceVersionURI">
            <summary>
            NEW: Unique URI used to identify a unique instance of a package's saved responses.  It is used for tracking package responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit/save session of a package instance.  It may be e.g., a new GUID, or a repeat of the pkgInstanceID followed by a version number.
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeinstanceVersion">
            <summary>
            Test whether instanceVersion should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeinstanceVersionPrev">
            <summary>
            Test whether instanceVersionPrev should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializechangedData">
            <summary>
            Test whether changedData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializenewData">
            <summary>
            Test whether newData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeX_approvalStatus">
            <summary>
            Test whether X_approvalStatus should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeX_completionStatus">
            <summary>
            Test whether X_completionStatus should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeAdmin">
            <summary>
            Test whether Admin should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializepackageID">
            <summary>
            Test whether packageID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializepkgTitle">
            <summary>
            Test whether pkgTitle should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializebaseURI">
            <summary>
            Test whether baseURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializefilename">
            <summary>
            Test whether filename should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializebasedOnURI">
            <summary>
            Test whether basedOnURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializelineage">
            <summary>
            Test whether lineage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeversion">
            <summary>
            Test whether version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializefullURI">
            <summary>
            Test whether fullURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeinstanceID">
            <summary>
            Test whether instanceID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeinstanceVersionURI">
            <summary>
            Test whether instanceVersionURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeX_pkgPreviousInstanceVersionURI">
            <summary>
            Test whether X_pkgPreviousInstanceVersionURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeX_prevVersionURI">
            <summary>
            Test whether X_prevVersionURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeX_pkgInstanceURI">
            <summary>
            Test whether X_pkgInstanceURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.BasePackageType.ShouldSerializeX_pkgInstanceVersionURI">
            <summary>
            Test whether X_pkgInstanceVersionURI should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ChangeLogType">
            <summary>
            Inforamtion about changes to file or part of a
            file.
            </summary>
        </member>
        <member name="P:SDC.Schema.ChangeLogType.Replaces">
            <summary>
            The retired/deprecated item that is being replaced.
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeChangeType">
            <summary>
            Test whether ChangeType should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeChangedField">
            <summary>
            Test whether ChangedField should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeChangedTo">
            <summary>
            Test whether ChangedTo should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeChangedFrom">
            <summary>
            Test whether ChangedFrom should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeReplaces">
            <summary>
            Test whether Replaces should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeChangeDate">
            <summary>
            Test whether ChangeDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeChangeDescription">
            <summary>
            Test whether ChangeDescription should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeEditors">
            <summary>
            Test whether Editors should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeLogType.ShouldSerializeChangeTracking">
            <summary>
            Test whether ChangeTracking should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeTrackingType.ShouldSerializeChangeTrackingID">
            <summary>
            Test whether ChangeTrackingID should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ChangeType">
            <summary>
            A structure to describe a single change in an XML document
            </summary>
        </member>
        <member name="P:SDC.Schema.ChangeType.NewValue">
            <summary>
            The new value that the targeted item's content is set to.
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeType.ShouldSerializeTargetItemID">
            <summary>
            Test whether TargetItemID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeType.ShouldSerializeTargetItemName">
            <summary>
            Test whether TargetItemName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeType.ShouldSerializeTargetItemXPath">
            <summary>
            Test whether TargetItemXPath should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ChangeType.ShouldSerializeNewValue">
            <summary>
            Test whether NewValue should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataSourceType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataSourceTypeDatabase.ShouldSerializeSQL">
            <summary>
            Test whether SQL should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataSourceTypeRDF_Store.ShouldSerializeSPARQL">
            <summary>
            Test whether SPARQL should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataSourceTypeRDF_StoreSPARQL.ShouldSerializeversion">
            <summary>
            Test whether version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataSourceTypeRDF_StoreSPARQL.ShouldSerializeValue">
            <summary>
            Test whether Value should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataSourceTypeXML.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.DataStoreType.SecurityInfo">
            <summary>
            Logon credentials should be provided only if the connection is trusted, secure, and encrypted.  Whenever possible, this information should not be communicated in this manner, and another security model should be adopted.
            </summary>
        </member>
        <member name="P:SDC.Schema.DataStoreType.DataStoreLocation">
            <summary>
            The path to the database server.
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreType.ShouldSerializeSecurityInfo">
            <summary>
            Test whether SecurityInfo should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreType.ShouldSerializeDataStoreLocation">
            <summary>
            Test whether DataStoreLocation should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreType.ShouldSerializeDatabaseSoftware">
            <summary>
            Test whether DatabaseSoftware should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreType.ShouldSerializeDatabaseName">
            <summary>
            Test whether DatabaseName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreType.ShouldSerializeConnectiontonString">
            <summary>
            Test whether ConnectiontonString should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreType.ShouldSerializeOtherConnectionParameters">
            <summary>
            Test whether OtherConnectionParameters should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreTypeSecurityInfo.ShouldSerializepassword">
            <summary>
            Test whether password should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataStoreTypeSecurityInfo.ShouldSerializeuserName">
            <summary>
            Test whether userName should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DataTypesDateTime_DEType">
            <summary>
            NEW:
            SDC datatypes for Data Entry (DE), based mostly on W3C specifications. Uses baseAttributes  and Extension capability to enhance the list of Data Types. Includes additonal metadata to specify data input restrictions for data entry forms, and to aid in validation of IHE RFD SubmitForm responses in XML instance documents.
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypesDateTime_DEType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DataTypesDateTime_SType">
            <summary>
            NEW:
            SDC datatypes in Simple (S) format, based mostly on W3C specifications.  Uses baseAttributes and Extension capability to enhance the list of Data Types.        **CHECK for ERRORS and completeness**
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypesDateTime_SType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypesDateTime_SType.ShouldSerializeItemElementName">
            <summary>
            Test whether ItemElementName should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DataTypesNumeric_DEType">
            <summary>
            NEW:
            SDC datatypes for Data Entry (DE), based mostly on W3C specifications. Uses baseAttributes  and Extension capability to enhance the list of Data Types. Includes additonal metadata to specify data input restrictions for data entry forms, and to aid in validation of IHE RFD SubmitForm responses in XML instance documents.
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypesNumeric_DEType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.DataTypesNumeric_SType">
            <summary>
            NEW:
            SDC datatypes in Simple (S) format, based mostly on W3C specifications.  Uses baseAttributes and Extension capability to enhance the list of Data Types.        **CHECK for ERRORS and completeness**
            </summary>
        </member>
        <member name="M:SDC.Schema.DataTypesNumeric_SType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.HTMLPackageType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.InterfaceType">
            <summary>
            This type provides information about an Applications Programming Interface (API)
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceType.ShouldSerializeIdentifer">
            <summary>
            Test whether Identifer should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceType.ShouldSerializeInterfaceName">
            <summary>
            Test whether InterfaceName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceType.ShouldSerializeDescription">
            <summary>
            Test whether Description should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceType.ShouldSerializeURL">
            <summary>
            Test whether URL should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceType.ShouldSerializeVersion">
            <summary>
            Test whether Version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceType.ShouldSerializeFields">
            <summary>
            Test whether Fields should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceType.ShouldSerializeDocumentation">
            <summary>
            Test whether Documentation should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.InterfaceTypeDocumentation">
            <summary>
            This type provides information about an Applications Programming Interface (API)
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceTypeDocumentation.ShouldSerializeFile">
            <summary>
            Test whether File should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.InterfaceTypeFields">
            <summary>
            This type provides information about an Applications Programming Interface (API)
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceTypeFields.ShouldSerializeField">
            <summary>
            Test whether Field should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceTypeFieldsField.ShouldSerializeGetter">
            <summary>
            Test whether Getter should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceTypeFieldsField.ShouldSerializeSetter">
            <summary>
            Test whether Setter should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.InterfaceTypeFieldsField.ShouldSerializeAction">
            <summary>
            Test whether Action should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.ItemMapType.TemplateTarget">
            <summary>
            Target item in a FormDesignTemplate.
            </summary>
        </member>
        <member name="P:SDC.Schema.ItemMapType.DataSource">
            <summary>
            The DataSource is an object that maps to a target item in a FormDesignTemplate.  DataSources objects can include terminology codes, local values, XML-based document entries, database records, RDF store triples, etc.
            </summary>
        </member>
        <member name="M:SDC.Schema.ItemMapType.ShouldSerializeMapComment">
            <summary>
            Test whether MapComment should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ItemMapType.ShouldSerializeTemplateTarget">
            <summary>
            Test whether TemplateTarget should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ItemMapType.ShouldSerializeDataSource">
            <summary>
            Test whether DataSource should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.formManagerURI">
            <summary>
            NEW
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.format">
            <summary>
            NEW
            enumeration
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.title">
            <summary>
            NEW
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.baseURI">
            <summary>
            If the ID does not use the default base URI (namespace), then the local baseURI goes here. Note that all IDs must be unique within a form, even if they do not have the same baseURI.
            
            Ideally, the baseURI + ID should combine to form a *globally* unique identifier, that uniquely identifies an item in a particular form.  The same baseURI and ID may be reused in derived or versioned forms, as long as the context stays the same, and any affected data elements remain unchanged in context and semantics.  Following this approach is likely to simplify analytics based on form content.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.filename">
            <summary>
            NEW: filename to use when the current FormDesign instance is saved as a file.
            For forms containing responses, the filename may include the formInstanceVersionURI,
            but the naming convention may be use-case-specific.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.basedOnURI">
            <summary>
            NEW: URI used to identify the form that that this FormDesign is based upon.  In most cases, this should be a standard form that is modified and/or extended by the current FormDesign.
            
            The current template reuses the basedOn IDs whenever the question/answer/semantic context is identical to the original.
            
            5/11/17:  Relying on data element mapping may be a better and more flexible approach than @basedOnURI. In this way, forms could compare data elements to determine if they contain semantic matches, and this is supported better with a more robust code map section.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.lineage">
            <summary>
            NEW: A text identifier that is used to group multiple versions of a single form.  The lineage is constant for all versions of a single kind of form.
            
            When appended to @baseURI, it can be used to retrieve all versions of one particular form.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.version">
            <summary>
            NEW: @version contains the version text for the current form.  It is designed to be used in conjuction with @baseURI and @lineage.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.fullURI">
            <summary>
            NEW: The full URI that uniquely identifies the current form.   It is created by concatenating @baseURI + lineage + version.  Each of the componenets is separated by a single forward slash.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.prevVersionURI">
            <summary>
            NEW: The full URI used to identify the form that is the immediate previous version of the current FormDesign
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.formInstanceURI">
            <summary>
            NEW: Unique URI used to identify a unique instance of a form.  Used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI does not change for each edit session of a form instance.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.formInstanceVersionURI">
            <summary>
            NEW: Unique URI used to identify a unique instance of a form's saved responses.  It is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit/save session of a form instance.  It may be e.g., a new GUID, or a repeat of the formInstanceID followed by a version number.
            </summary>
        </member>
        <member name="P:SDC.Schema.PackageItemType.formPreviousInstanceVersionURI">
            <summary>
            NEW: Unique URI used to identify the immediate previous instance of a form containing responses.  This is the @formInstanceVersionURI that represents the instance of the form that the user opened up before beginning a new cycle of edit/save.  This attribute is used for tracking form responses across time and across multiple episodes of editing by end-users.  This URI must change for each edit session of a form instance.
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializechangedData">
            <summary>
            Test whether changedData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializenewData">
            <summary>
            Test whether newData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializeformat">
            <summary>
            Test whether format should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializeformManagerURI">
            <summary>
            Test whether formManagerURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializepackageID">
            <summary>
            Test whether packageID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializetitle">
            <summary>
            Test whether title should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializebaseURI">
            <summary>
            Test whether baseURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializefilename">
            <summary>
            Test whether filename should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializebasedOnURI">
            <summary>
            Test whether basedOnURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializelineage">
            <summary>
            Test whether lineage should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializeversion">
            <summary>
            Test whether version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializefullURI">
            <summary>
            Test whether fullURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializeprevVersionURI">
            <summary>
            Test whether prevVersionURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializeformInstanceURI">
            <summary>
            Test whether formInstanceURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializeformInstanceVersionURI">
            <summary>
            Test whether formInstanceVersionURI should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PackageItemType.ShouldSerializeformPreviousInstanceVersionURI">
            <summary>
            Test whether formPreviousInstanceVersionURI should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.ParameterValueType">
            <summary>
            This type describes strongly-typed parameters used in functions and web services.  Values are hard-coded as constants in the XML instance document.  They are not user-entered values.
            </summary>
        </member>
        <member name="M:SDC.Schema.ParameterValueType.ShouldSerializeparamName">
            <summary>
            Test whether paramName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredActionType2.ShouldSerializeElse">
            <summary>
            Test whether Else should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PredActionType2.ShouldSerializeActions">
            <summary>
            Test whether Actions should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.PropertyType1">
            <summary>
            MOVED: From SDCFormDesign
            CHANGED:
            Property is any type of data that is associated with any form item (e.g., section, question, list item) in any context.  The Property context is specified by the @type attribute.  Examples of @type values may include:
            -alternate language representations, e.g., 'spanish'
            -'instruction'
            -'tooltip'
            -'help' for a pop-up help box
            -'outlining' (such as question numbering)
            
            The @type enumerations must be defined and documented for the particular use case, and are currently out of scope in this schema definition.  Multiple type tokens for a single element are supported.
            
            RENAMED:  'OtherText' to 'Property' 9/14/2016
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyType1.propName">
            <summary>
            NEW
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyType1.propClass">
            <summary>
            NEW
            </summary>
        </member>
        <member name="M:SDC.Schema.PropertyType1.ShouldSerializepropName">
            <summary>
            Test whether propName should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PropertyType1.ShouldSerializepropClass">
            <summary>
            Test whether propClass should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.PropertyType1.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RegisteredItemStateType">
            <summary>
            This type provides a structure to record status information about a file, template or package stored in a registry.
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializeAcceptability">
            <summary>
            Test whether Acceptability should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializeAdministrativeStatus">
            <summary>
            Test whether AdministrativeStatus should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializeAdministrativeNote">
            <summary>
            Test whether AdministrativeNote should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializeRegistrationStatus">
            <summary>
            Test whether RegistrationStatus should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializeRegistrationStatusDate">
            <summary>
            Test whether RegistrationStatusDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializeEffectiveDate">
            <summary>
            Test whether EffectiveDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializeUntilDate">
            <summary>
            Test whether UntilDate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemStateType.ShouldSerializePreviousStatus">
            <summary>
            Test whether PreviousStatus should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RegisteredItemType">
            <summary>
            This type provides a structure to record information about a file, template or package stored in a registry.
            </summary>
        </member>
        <member name="P:SDC.Schema.RegisteredItemType.RegisteredItemDescription">
            <summary>
            Description of the Registered Item
            </summary>
        </member>
        <member name="P:SDC.Schema.RegisteredItemType.State">
            <summary>
            Status of the Registered Item
            </summary>
        </member>
        <member name="P:SDC.Schema.RegisteredItemType.Contact">
            <summary>
            Person(s) and Organization(s) to contact regarding the Registration Status of the Registered Item
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemType.ShouldSerializeRegisteredItemDescription">
            <summary>
            Test whether RegisteredItemDescription should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemType.ShouldSerializeContact">
            <summary>
            Test whether Contact should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemType.ShouldSerializeReferenceDocument">
            <summary>
            Test whether ReferenceDocument should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegisteredItemType.ShouldSerializeState">
            <summary>
            Test whether State should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.RegistrySummaryType">
            <summary>
            This type provides a structure to record information about a registry.
            </summary>
        </member>
        <member name="T:SDC.Schema.RegistryType">
            <summary>
            This type provides data about the current and original registries that host the template or package, and also provides information about the status of the template/package within the current registry.
            </summary>
        </member>
        <member name="M:SDC.Schema.RegistryType.ShouldSerializeOriginalRegistry">
            <summary>
            Test whether OriginalRegistry should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegistryType.ShouldSerializeCurrentRegistry">
            <summary>
            Test whether CurrentRegistry should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.RegistryType.ShouldSerializeRegistrationStatus">
            <summary>
            Test whether RegistrationStatus should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SQL_Type.ShouldSerializesqlDialect">
            <summary>
            Test whether sqlDialect should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.SQL_Type.ShouldSerializesqlDialectVersion">
            <summary>
            Test whether sqlDialectVersion should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.TemplateAdminType">
            <summary>
            Contains information about a registered package, including a description of the package contents and purpose (PackageDescription), information about the registry that contains the package XML (RegistryData), and information about the package file characteristics (TemplateFile).
            </summary>
        </member>
        <member name="P:SDC.Schema.TemplateAdminType.PackageDescription">
            <summary>
            Description of the XML package contents and the purpose for the contained XML templates.
            </summary>
        </member>
        <member name="P:SDC.Schema.TemplateAdminType.RegistryData">
            <summary>
            Information about the registry that contains the XML template, and registration status of the XML template. (The XML template may contain a package of sub-templates.  In this case, the the RegistryData refers primarily to the package, not the sub-templates.)
            </summary>
        </member>
        <member name="P:SDC.Schema.TemplateAdminType.TemplateFile">
            <summary>
            Information about the  XML template's file characteristics (The XML template may contain a package of sub-templates.  In this case, the the RegistryData refers primarily to the entire package, not the sub-templates.)
            </summary>
        </member>
        <member name="P:SDC.Schema.TemplateAdminType.DigitalSignature">
            <summary>
            NEW
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminType.ShouldSerializePackageDescription">
            <summary>
            Test whether PackageDescription should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminType.ShouldSerializeDigitalSignature">
            <summary>
            Test whether DigitalSignature should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminType.ShouldSerializeRegistryData">
            <summary>
            Test whether RegistryData should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminType.ShouldSerializeTemplateFile">
            <summary>
            Test whether TemplateFile should be serialized
            </summary>
        </member>
        <member name="T:SDC.Schema.TemplateAdminTypeDigitalSignature">
            <summary>
            Contains information about a registered package, including a description of the package contents and purpose (PackageDescription), information about the registry that contains the package XML (RegistryData), and information about the package file characteristics (TemplateFile).
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignature.ShouldSerializePackageSignature">
            <summary>
            Test whether PackageSignature should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignature.ShouldSerializeSignatureProperties">
            <summary>
            Test whether SignatureProperties should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeSigner">
            <summary>
            Test whether Signer should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeSignerPublicKeyCertificate">
            <summary>
            Test whether SignerPublicKeyCertificate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeSignatureReason">
            <summary>
            Test whether SignatureReason should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeSignatureDateTimeStamp">
            <summary>
            Test whether SignatureDateTimeStamp should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeX_CertificateAuthority">
            <summary>
            Test whether X_CertificateAuthority should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeX_SignerPublicKey">
            <summary>
            Test whether X_SignerPublicKey should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeX_SignatureAlgorithm">
            <summary>
            Test whether X_SignatureAlgorithm should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignatureProperties.ShouldSerializeImage">
            <summary>
            Test whether Image should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignaturePropertiesSignatureDateTimeStamp.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignaturePropertiesSignatureReason.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignaturePropertiesX_CertificateAuthority.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateAdminTypeDigitalSignatureSignaturePropertiesX_SignatureAlgorithm.ShouldSerializeval">
            <summary>
            Test whether val should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateTargetType.ShouldSerializeTargetItemID">
            <summary>
            Test whether TargetItemID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.TemplateTargetType.ShouldSerializeTargetDisplayText">
            <summary>
            Test whether TargetDisplayText should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.ValidationType.ShouldSerializeItems">
            <summary>
            Test whether Items should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.XMLPackageType.FormDesignPkgLink">
            <summary>
            Retrieve raw FormDesign XML from link
            (Previously, retrieve a Pkg that wraps FormDesign XML)
            </summary>
        </member>
        <member name="P:SDC.Schema.XMLPackageType.MapTemplate">
            <summary>
            Describes mappings between FormDesignTemplate items and data elements, terminologies, databases, XML files, local values, etc.
            </summary>
        </member>
        <member name="P:SDC.Schema.XMLPackageType.ReportDesignTemplate">
            <summary>
            ReportDesignTemplate describes the information content of a report (e.g., sections, questions etc).  This enables control of the presentation view of the user responses derived from a designated FormDesignTemplate.  It allows the report presentation to look substantially different from the data-entry form view defined by the FormDesignTemplate.
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageType.ShouldSerializeFormDesign">
            <summary>
            Test whether FormDesign should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageType.ShouldSerializeFormDesignPkgLink">
            <summary>
            Test whether FormDesignPkgLink should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageType.ShouldSerializeDataElement">
            <summary>
            Test whether DataElement should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageType.ShouldSerializeMapTemplate">
            <summary>
            Test whether MapTemplate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageType.ShouldSerializeReportDesignTemplate">
            <summary>
            Test whether ReportDesignTemplate should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageType.ShouldSerializeHelperFile">
            <summary>
            Test whether HelperFile should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageType.ShouldSerializeItem">
            <summary>
            Test whether Item should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageTypeHelperFile.ShouldSerializetemplateID">
            <summary>
            Test whether templateID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageTypeHelperFile.ShouldSerializetargetTemplateID">
            <summary>
            Test whether targetTemplateID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XMLPackageTypeReportDesignTemplate.ShouldSerializetargetTemplateID">
            <summary>
            Test whether targetTemplateID should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XPathType.ShouldSerializeversion">
            <summary>
            Test whether version should be serialized
            </summary>
        </member>
        <member name="M:SDC.Schema.XQueryType.ShouldSerializeversion">
            <summary>
            Test whether version should be serialized
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyInfoOrdered.XmlOrder">
            <summary>
            xmlOrder is the Order found in the XmlElementAttribute's Order property.  
            xmlOrder represents the element order in the SDC XML.  
            However, all inherited properties of the requested object occur as SDC XML elements that precede the current object's XML element, 
            even when the inherited properties have a higher xmlOrder value.
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyInfoMetadata.PropName">
            <summary>
            Name of the class property that contains the requested object
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyInfoMetadata.ItemIndex">
            <summary>
            If the requested object is held by a parent IEnumerable (usually an array of List), itemIndex contains the index of the requested object inside ieItems
            If the requested object is represented by a non-IEnumerable property, then itemIndex = -1 and ieItems is null.
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyInfoMetadata.IeItems">
            <summary>
            If the requested object is held by a parent IEnumerable (usually an array of List), the IEnumerable is retuurned as ieItems.
            If the requested object is represented by a non-IEnumerable property, then itemIndex = -1 and ieItems is null.
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyInfoMetadata.XmlOrder">
            <summary>
            xmlOrder is the Order found in the XmlElementAttribute's Order property.  
            xmlOrder represents the element order in the SDC XML.  
            However, all inherited properties of the requested object occur as SDC XML elements that precede the current object's XML element, 
            even when the inherited properties have a higher xmlOrder value.
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyInfoMetadata.MaxXmlOrder">
            <summary>
            maxXmlOrder is the maximum xmlOrder value found on properties in the XmlElementAttribute's Order field of the requested object's parent class 
            The parent class codes for the property member that represents the requested object. 
            Property members in the parent class may be decorated with XmlElementAttribute attributes, and these attributes have an "Order" field
            </summary>
        </member>
        <member name="P:SDC.Schema.PropertyInfoMetadata.XmlElementName">
            <summary>
            Name of the XML element that is used to represent the requested object
            </summary>
        </member>
        <member name="M:SDC.Schema.SdcUtil.GetPropertyInfo(SDC.Schema.BaseType,System.String@,System.Int32@,System.Collections.Generic.IEnumerable{SDC.Schema.BaseType}@,System.Int32@,System.Int32@,System.String@,System.Boolean)">
            <summary>
            Get the PropertyInfo object that represents the "item" property in the item's ParentNode
            This PropertyInfo object may be decorated with important XML annnotations such as XmlElementAttribute
            The returned PropertyInfo object may refer to a BaseType or the IEnumerables List&lt;BaseType> and Array&lt;BaseType> 
            If a wrapper property was created in an SDC parrtial class, only the inner property (i.e., the one with XML attributes) is returned
            </summary>
            <param name="item"></param>
            <param name="getNames">if true, element names will be determined</param>
            <returns>
            propName: name of the property is returned as an out parameter
            ieItems: if the property is IEnumerable&lt;BaseType>, the IEnumerable property object is returned as an out parameter, otherwise it is null
            itemIndex: the index of "item" in "ieItems" is returned as an out parameter, otherwise it is -1
            </returns>
        </member>
        <member name="M:SDC.Schema.SdcUtil.ReflectPropertyInfoAttributes(System.Reflection.TypeInfo)">
            <summary>
            Uses reflection to determine XML attributes that are eligible to be serialized.
            </summary>
            <param name="ti"></param>
            <returns>List&lt;PropertyInfo></returns>
        </member>
        <member name="M:SDC.Schema.SdcUtil.ReflectXmlAttributesFilled(SDC.Schema.BaseType)">
            <summary>
            Uses reflection to determine XML attributes that will be serialized, based on the passed parameter object.
            These attributes are determined by innvoking the "ShouldSerialize[Attribute Name]" methods in the passed parameter
            </summary>
            <param name="bt">A non-null SDC object derrived from BaseType</param>
            <returns>List&lt;PropertyInfo></returns>
        </member>
        <member name="M:SDC.Schema.BaseTypeExtensions.GetXmlAttributesFilled(SDC.Schema.BaseType)">
            <summary>
            Provides PropertyInfo (PI) definitions for all bt attributes that will be serialized to XML
            Each PI can be used t  obtain the type, name and other features of each attribute
            Also, each PI can be used to create an instance of the object by calling PI.GetValue(parentObject)
            </summary>
            <param name="bt"></param>
            <returns>List&lt;PropertyInfo></returns>
        </member>
        <member name="M:SDC.Schema.BaseTypeExtensions.GetXmlAttributesAll(SDC.Schema.BaseType)">
            <summary>
            Provides PropertyInfo (PI) definitions for all XML attributes of an SDC node
            </summary>
            <param name="bt"></param>
            <returns><b>List&lt;PropertyInfo></b> </returns>
        </member>
        <member name="M:SDC.Schema.SdcSerializerJson`1.SerializeJson``1(``0)">
            <summary>
            Serializes current EntityBase object into an json string
            </summary>
        </member>
        <member name="M:SDC.Schema.SdcSerializerJson`1.DeserializeJson``1(System.String,``0@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an EntityBase object
            </summary>
            <param name="input">string workflow markup to deserialize</param>
            <param name="obj">Output EntityBase object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:SDC.Schema.SdcSerializerMsgPack`1.SerializeMsgPack(`0)">
            <summary>
            Serializes current EntityBase object to msgpack format
            </summary>
            <returns>string binary value</returns>
        </member>
        <member name="M:SDC.Schema.SdcSerializerMsgPack`1.DeserializeMsgPack(System.Byte[],`0@,System.Exception@)">
            <summary>
            Deserializes workflow markup into an EntityBase object
            </summary>
            <param name="input">string workflow markup to deserialize</param>
            <param name="obj">Output EntityBase object</param>
            <param name="exception">output Exception value if deserialize failed</param>
            <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        </member>
        <member name="M:SDC.Schema.SdcSerializerMsgPack`1.DeserializeMsgPack(System.Byte[])">
            <summary>
            Deserializes msgpack to current EntityBase object
            </summary>
        </member>
        <member name="M:StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts the string expression of an enum value to the desired type. Example: var qType= reeBuilder.ConvertStringToEnum&lt;ItemType&gt;("answer");
            </summary>
            <typeparam name="Tenum">The enum type that the inputString will be converted into.</typeparam>
            <param name="inputString">The string that must represent one of the Tenum enumerated values; not case sensitive</param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.As``1(System.Object)">
            <summary>
            Direct Cast as T, if possible
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:ObjectExtensions.TryAs``1(System.Object,``0@)">
            <summary>
            Try to Cast as T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="oIn"></param>
            <param name="oOut"></param>
            <returns></returns>
        </member>
    </members>
</doc>
